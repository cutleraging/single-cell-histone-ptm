df <- assay(obj, "MS2.log2") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
pdf("MS2.log2_distribution_cell.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = as.factor(run_id), y = value, fill = as.factor(replicate))) +
geom_boxplot(width = 0.7) +
theme_Publication() +
labs(title = "Cell #", x = "Run", y = "Log2(MS2 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# plot by peptide
pdf("MS2.log2_distribution_peptide.pdf",
width = 15,
height = 10)
ggplot(df, aes(x = id, y = value)) +
geom_boxplot() +
theme_Publication() +
labs(title = "Cell #", x = "Peptide", y = "Log2(MS2 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
run_id = obj$run_id,
cell_number = as.factor(obj$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$charge))
pdf("MS2.log2_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj, "MS2.log2"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS2 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 8
saveRDS(obj, "obj.RDS")
# Chunk 9
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
# median center
assays(obj)[["MS1.log2.center"]] <- sweep(assay(obj, "MS1.log2"), 2, apply(assay(obj, "MS1.log2"), 2, function(x) median(x, na.rm = TRUE)), FUN = "-")
# plot by cell
df <- assay(obj, "MS1.log2.center") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
pdf("MS1.log2.center_distribution_cell.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = as.factor(run_id), y = value, fill = as.factor(replicate))) +
geom_boxplot(width = 0.7) +
theme_Publication() +
labs(title = "Cell #", x = "Run", y = "Log2(MS1 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# plot by peptide
pdf("MS1.log2.center_distribution_peptide.pdf",
width = 15,
height = 10)
ggplot(df, aes(x = id, y = value)) +
geom_boxplot() +
theme_Publication() +
labs(title = "Cell #", x = "Peptide", y = "Log2(MS1 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
run_id = obj$run_id,
cell_number = as.factor(obj$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$charge))
pdf("MS1.log2.center_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj, "MS1.log2.center"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Centered Log2(MS1 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 10
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
# median center
assays(obj)[["MS2.log2.center"]] <- sweep(assay(obj, "MS2.log2"), 2, apply(assay(obj, "MS2.log2"), 2, function(x) median(x, na.rm = TRUE)), FUN = "-")
# plot by cell
df <- assay(obj, "MS2.log2.center") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
pdf("MS2.log2.center_distribution_cell.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = as.factor(run_id), y = value, fill = as.factor(replicate))) +
geom_boxplot(width = 0.7) +
theme_Publication() +
labs(title = "Cell #", x = "Run", y = "Log2(MS2 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# plot by peptide
pdf("MS2.log2.center_distribution_peptide.pdf",
width = 15,
height = 10)
ggplot(df, aes(x = id, y = value)) +
geom_boxplot() +
theme_Publication() +
labs(title = "Cell #", x = "Peptide", y = "Log2(MS2 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
run_id = obj$run_id,
cell_number = as.factor(obj$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$charge))
pdf("MS2.log2.center_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj, "MS2.log2.center"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Centered Log2(MS2 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 11
saveRDS(obj, "obj.RDS")
# Chunk 12
ratio.ms1 <- assay(obj, "MS1") %>%
rownames_to_column("Peptide.Note") %>%
pivot_longer(
cols = -Peptide.Note,
names_to = "Replicate.Name",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "Replicate.Name", by.y = "row.names") %>%
merge(as.data.frame(rowData(obj)), by.x = "Peptide.Note", by.y = "row.names") %>%
group_by(sequence, Replicate.Name) %>%
filter(n_distinct(Peptide.Note) >= 2) %>%
mutate(ratio = value / sum(value)) %>%
as.data.frame()
pdf("MS1.ratio_cell.pdf",
width = 5,
height = 5)
ggplot(ratio.ms1, aes(x = as.factor(run_id), y = ratio, fill = as.factor(replicate))) +
geom_boxplot(width = 0.7) +
theme_Publication() +
labs(title = "Cell #", x = "Run", y = "MS1 peptide ratio", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# verify that for each peptide all the mods add up to 1
df.verify <- ratio.ms1 %>%
group_by(sequence, Replicate.Name) %>%
summarize(sum = sum(ratio))
hist(df.verify$sum)
# Chunk 13
ratio.ms2 <- assay(obj, "MS2") %>%
rownames_to_column("Peptide.Note") %>%
pivot_longer(
cols = -Peptide.Note,
names_to = "Replicate.Name",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "Replicate.Name", by.y = "row.names") %>%
merge(as.data.frame(rowData(obj)), by.x = "Peptide.Note", by.y = "row.names") %>%
group_by(sequence, Replicate.Name) %>%
filter(n_distinct(Peptide.Note) >= 2) %>%
mutate(ratio = value / sum(value)) %>%
as.data.frame()
pdf("MS2.ratio_cell.pdf",
width = 5,
height = 5)
ggplot(ratio.ms2, aes(x = as.factor(run_id), y = ratio, fill = as.factor(replicate))) +
geom_boxplot(width = 0.7) +
theme_Publication() +
labs(title = "Cell #", x = "Run", y = "MS2 peptide ratio", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# verify that for each peptide all the mods add up to 1
df.verify <- ratio.ms2 %>%
group_by(sequence, Replicate.Name) %>%
summarize(sum = sum(ratio))
hist(df.verify$sum)
# Chunk 14
load_ratio_summarized_experiment <- function(ratio.ms1, ratio.ms2, obj){
# transform
df.ms1 <- ratio.ms1 %>%
select(Peptide.Note, Replicate.Name, ratio) %>%
spread(key = Replicate.Name, value = ratio)
row.names(df.ms1) <- df.ms1$Peptide.Note
df.ms1 <- df.ms1[,-1]
df.ms2 <- ratio.ms2 %>%
select(Peptide.Note, Replicate.Name, ratio) %>%
spread(key = Replicate.Name, value = ratio)
row.names(df.ms2) <- df.ms2$Peptide.Note
df.ms2 <- df.ms2[,-1]
df.rt <- assay(obj, "RT")
df.rt <- df.rt[rownames(df.rt) %in% rownames(df.ms1),]
df.rt <- df.rt[match(rownames(df.ms1), rownames(df.rt)),]
# add peptide information
rowData <- rowData(obj)
rowData <- rowData[rownames(rowData) %in% rownames(df.ms1),]
rowData <- rowData[match(rownames(df.ms1), rownames(rowData)),]
# add meta data
# filter coldata by unique run id
extracted_run_id <- sapply(strsplit(colnames(df.ms1), "_", fixed = TRUE), function(x) tail(x, 1))
colData <- colData(obj)
colData <- colData[colData$run_id %in% extracted_run_id,]
colData <- colData[match(extracted_run_id, colData$run_id),]
# create summarized exp obj
se <- SummarizedExperiment(assays = list(MS1.ratio = df.ms1,
MS2.ratio = df.ms2,
RT = df.rt),
rowData = list(charge = rowData$charge,
sequence = rowData$sequence),
colData = colData)
return(se)
}
obj.ratio <- load_ratio_summarized_experiment(ratio.ms1, ratio.ms2, obj)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.ratio$replicate),
run_id = obj.ratio$run_id,
cell_number = as.factor(obj.ratio$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj.ratio)$charge))
pdf("MS1.ratio_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj.ratio, "MS1.ratio"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "MS1 Peptide Ratio"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
pdf("MS2.ratio_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj.ratio, "MS2.ratio"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "MS2 Peptide Ratio"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 15
saveRDS(obj.ratio, "obj.ratio.RDS")
# Chunk 16
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
# assess batch effects
batchQC(assay(obj, "MS1.log2"), obj$replicate, NULL,
report_file="MS1.log2.no-correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# have different cell numbers be condition
pdata <- data.frame(colnames(obj), obj$replicate, obj$multiplier)
modmatrix = model.matrix(~as.integer(obj$multiplier), data=pdata)
assays(obj, withDimnames=FALSE)[["MS1.log2.combat"]] <- ComBat(dat = assay(obj, "MS1.log2"),
batch = obj$replicate,
mod = modmatrix,
ref.batch = 1)
# assess correction
batchQC(assay(obj, "MS1.log2.combat"), obj$replicate, NULL,
report_file="MS1.log2.correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# heatmap
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
run_id = obj$run_id,
cell_number = as.factor(obj$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$charge))
pdf("MS1.log2.combat_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj, "MS1.log2.combat"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS1 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 17
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
# assess batch effects
batchQC(assay(obj, "MS2.log2"), obj$replicate, NULL,
report_file="MS2.log2.no-correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# have different cell numbers be condition
pdata <- data.frame(colnames(obj), obj$replicate, obj$multiplier)
modmatrix = model.matrix(~as.integer(obj$multiplier), data=pdata)
assays(obj, withDimnames=FALSE)[["MS2.log2.combat"]] <- ComBat(dat = assay(obj, "MS2.log2"),
batch = obj$replicate,
mod = modmatrix,
ref.batch = 1)
# assess correction
batchQC(assay(obj, "MS2.log2.combat"), obj$replicate, NULL,
report_file="MS2.log2.correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# heatmap
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
run_id = obj$run_id,
cell_number = as.factor(obj$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$charge))
pdf("MS2.log2.combat_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj, "MS2.log2.combat"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS2 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 18
saveRDS(obj, "obj.RDS")
# Chunk 19
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
# assess batch effects
# batchQC(assay(obj, "MS1.log2.center"), obj$replicate, NULL,
#         report_file="MS1.log2.center.no-correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# have different cell numbers be condition
pdata <- data.frame(colnames(obj), obj$replicate, obj$multiplier)
modmatrix = model.matrix(~as.integer(obj$multiplier), data=pdata)
assays(obj, withDimnames=FALSE)[["MS1.log2.center.combat"]] <- ComBat(dat = assay(obj, "MS1.log2.center"),
batch = obj$replicate,
mod = modmatrix,
ref.batch = 1)
# # assess correction
# batchQC(assay(obj, "MS1.log2.center.combat"), obj$replicate, NULL,
#         report_file="MS1.log2.center.correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# heatmap
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
run_id = obj$run_id,
cell_number = as.factor(obj$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$charge))
pdf("MS1.log2.center.combat_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj, "MS1.log2.center.combat"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS1 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 20
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
# assess batch effects
# batchQC(assay(obj, "MS2.log2.center"), obj$replicate, NULL,
#         report_file="MS2.log2.center.no-correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# have different cell numbers be condition
pdata <- data.frame(colnames(obj), obj$replicate, obj$multiplier)
modmatrix = model.matrix(~as.integer(obj$multiplier), data=pdata)
assays(obj, withDimnames=FALSE)[["MS2.log2.center.combat"]] <- ComBat(dat = assay(obj, "MS2.log2.center"),
batch = obj$replicate,
mod = modmatrix,
ref.batch = 1)
# # assess correction
# batchQC(assay(obj, "MS2.log2.center.combat"), obj$replicate, NULL,
#         report_file="MS2.log2.center.correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# heatmap
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
run_id = obj$run_id,
cell_number = as.factor(obj$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$charge))
pdf("MS2.log2.center.combat_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj, "MS2.log2.center.combat"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS2 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 21
saveRDS(obj, "obj.RDS")
# Chunk 22
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
# assess batch effects
batchQC(assay(obj.ratio, "MS1.ratio"), obj.ratio$replicate, NULL,
report_file="MS1.ratio.no-correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# have different cell numbers be condition
pdata <- data.frame(colnames(obj.ratio), obj.ratio$replicate, obj.ratio$multiplier)
modmatrix = model.matrix(~as.integer(obj.ratio$multiplier), data=pdata)
assays(obj.ratio, withDimnames=FALSE)[["MS1.ratio.combat"]] <- ComBat(dat = assay(obj.ratio, "MS1.ratio"),
batch = obj.ratio$replicate,
mod = modmatrix,
ref.batch = 1)
# assess correction
batchQC(assay(obj.ratio, "MS1.ratio.combat"), obj.ratio$replicate, NULL,
report_file="MS1.ratio.correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# heatmap
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
column_ha = HeatmapAnnotation(replicate = as.factor(obj.ratio$replicate),
run_id = obj.ratio$run_id,
cell_number = as.factor(obj.ratio$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj.ratio)$charge))
pdf("MS1.ratio.combat_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj.ratio, "MS1.ratio.combat"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "MS1 peptide ratio"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 23
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/batchqc")
# assess batch effects
batchQC(assay(obj.ratio, "MS2.ratio"), obj.ratio$replicate, NULL,
report_file="MS2.ratio.no-correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# have different cell numbers be condition
pdata <- data.frame(colnames(obj.ratio), obj.ratio$replicate, obj.ratio$multiplier)
modmatrix = model.matrix(~as.integer(obj.ratio$multiplier), data=pdata)
assays(obj.ratio, withDimnames=FALSE)[["MS2.ratio.combat"]] <- ComBat(dat = assay(obj.ratio, "MS2.ratio"),
batch = obj.ratio$replicate,
mod = modmatrix,
ref.batch = 1)
# assess correction
batchQC(assay(obj.ratio, "MS2.ratio.combat"), obj.ratio$replicate, NULL,
report_file="MS2.ratio.correction.html", report_dir=".",
report_option_binary="111111111",
view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# heatmap
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization")
column_ha = HeatmapAnnotation(replicate = as.factor(obj.ratio$replicate),
run_id = obj.ratio$run_id,
cell_number = as.factor(obj.ratio$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj.ratio)$charge))
pdf("MS2.ratio.combat_heatmap.pdf",
width = 10,
height = 10)
Heatmap(scale(assay(obj.ratio, "MS2.ratio.combat"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "MS2 peptide ratio"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 24
saveRDS(obj.ratio, "obj.ratio.RDS")
