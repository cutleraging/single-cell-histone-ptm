stringsAsFactors = TRUE)
# coldata[] <- lapply(coldata, as.factor) # make all vars factors
# skyline output
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/intensities")
# combine all plates
df.1 <- read.csv("240321_Skyline_SC_export_auto1_cells.csv",
header = TRUE,
stringsAsFactors = TRUE,
na.strings = "#N/A")
df.2 <- read.csv("240321_Skyline_SC_export_auto2_auto4_cells.csv",
header = TRUE,
stringsAsFactors = TRUE,
na.strings = "#N/A")
df.3 <- read.csv("240321_Skyline_SC_export_nabut1_nabut4_cells.csv",
header = TRUE,
stringsAsFactors = TRUE,
na.strings = "#N/A")
df.combine <- rbind(df.1, df.2, df.3)
# filter peptides
df.combine.filter <- filter_peptides(df.combine)
# deconvolute isobaric H4 peptides using fragments
df.combine.filter.deconv <- deconvolute_h4(df.combine.filter)
# combine into summarized experiment object
obj <- load_skyline_summarized_experiment(df.combine.filter.deconv, coldata)
# add total MS1 and MS2 to coldata
obj$total.ms1 <- colSums(assay(obj, "MS1"), na.rm = TRUE)
obj$total.ms2 <- colSums(assay(obj, "MS2"), na.rm = TRUE)
# change replicate 4 to 3 to make it easier to read for auto
# change replicate 4 to 2 to make it easier to read for nabut
obj$replicate <- as.character(obj$replicate)
obj$replicate[obj$replicate == 4 & obj$experiment == "auto"] <- 3
obj$replicate[obj$replicate == 4 & obj$experiment == "nabut"] <- 2
obj$replicate <- factor(obj$replicate)
# set cells from auto experiments to "control" condition - these were not treated
obj$condition[obj$experiment == "auto"] <- "control"
# Chunk 5
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto+nabut")
saveRDS(obj, "obj.RDS")
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto+nabut/unfiltered")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto+nabut/unfiltered")
write.csv(assay(obj, "MS1"), "MS1.raw.intensity.csv")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(SummarizedExperiment)
library(MultiAssayExperiment)
library(PCAtools)
library(ComplexHeatmap)
library(BatchQC)
library(sva)
library(tidyr)
library(dplyr)
library(tibble)
library(purrr)
library(ggplot2)
library(pheatmap)
library(ggpubr)
library(reshape2)
library(viridis)
library(ggrepel)
# Chunk 3
source("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/functions.R")
# Chunk 4
# metadata
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell")
coldata <- read.csv("sample-table.csv",
header = TRUE,
stringsAsFactors = TRUE)
# coldata[] <- lapply(coldata, as.factor) # make all vars factors
# skyline output
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/intensities")
# combine all plates
df.1 <- read.csv("240321_Skyline_SC_export_auto1_cells.csv",
header = TRUE,
stringsAsFactors = TRUE,
na.strings = "#N/A")
df.2 <- read.csv("240321_Skyline_SC_export_auto2_auto4_cells.csv",
header = TRUE,
stringsAsFactors = TRUE,
na.strings = "#N/A")
df.combine <- rbind(df.1, df.2)
# filter peptides
df.combine.filter <- filter_peptides(df.combine)
# deconvolute isobaric H4 peptides using fragments
df.combine.filter.deconv <- deconvolute_h4(df.combine.filter)
# combine into summarized experiment object
obj <- load_skyline_summarized_experiment(df.combine.filter.deconv, coldata)
# add total MS1 and MS2 to coldata
obj$total.ms1 <- colSums(assay(obj, "MS1"), na.rm = TRUE)
obj$total.ms2 <- colSums(assay(obj, "MS2"), na.rm = TRUE)
# change replicate 4 to 3 to make it easier to read
obj$replicate <- as.character(obj$replicate)
obj$replicate[obj$replicate == 4] <- 3
obj$replicate <- factor(obj$replicate)
# Chunk 5
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto")
saveRDS(obj, "obj.RDS")
# Chunk 6
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
# Categorize each peptide
categories <- map_chr(rownames(obj), categorize_peptide)
# Count categories
category_counts <- table(categories)
# Convert to dataframe for ggplot
df <- as.data.frame(category_counts)
df$categories <- factor(df$categories, levels = c("Unmodified",
"Acetylated",
"Mono-methylated",
"Di-methylated",
"Tri-methylated",
"Hybrid modifications",
"Other modifications"))
pdf("PTM_types.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = "", y = Freq, fill = categories)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
scale_fill_brewer(palette = "Set1") + # Use a color palette
theme_void() +
theme(legend.position = "right",  # Adjust legend position
legend.title = element_text(size = 12),  # Adjust legend title size
legend.text = element_text(size = 10)) +  # Adjust legend text size
labs(fill = "Modification Type") +
geom_text(aes(label = paste0(round(Freq / sum(Freq) * 100), "%")),
position = position_stack(vjust = 0.6), size = 4)# Add percentage labels
dev.off()
# Chunk 7
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
# by plate
df <- as.data.frame(table(obj$replicate))
names(df) <- c("Replicate", "Count")
pdf("samples_per_replicate.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Replicate, y = Count)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_Publication() +
labs(title = "Number of samples per plate", x = "Plate Replicate", y = "Frequency") +
scale_y_continuous(labels = scales::number_format(accuracy = 1))
dev.off()
# by type
df <- as.data.frame(table(obj$multiplier))
names(df) <- c("Replicate", "Count")
pdf("samples_per_type.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Replicate, y = Count)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_Publication() +
labs(title = "Number of samples per type", x = "Amount of cells", y = "Frequency")
dev.off()
# Chunk 8
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
# MS1 precursors
data <- assay(obj, "MS1")
data[data == 0] <- NA
df <- as.data.frame(colSums(!is.na(data)))
names(df) <- c("Count")
# number of missing values
sum(is.na(data))/length(!data)*100
pdf("MS1_precursors_per_sample.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Count)) +
geom_histogram() +
theme_Publication() +
labs(title = "Number of precursors\ndetected per sample", x = "# Peptides", y = "Frequency")
dev.off()
pdf("MS1_missing_values.pdf",
width = 5,
height = 5)
set.seed(123)
pheatmap(data,
annotation_col = as.data.frame(colData(obj)[,c("replicate", "multiplier")]),
scale = "none",
na_col = "black",
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE)
dev.off()
# MS2 fragments
# not accurate because don't have data for individual fragments,
# just aggreagate for each peptide
data <- assay(obj, "MS2")
data[data == 0] <- NA
df <- as.data.frame(colSums(!is.na(data)))
names(df) <- c("Count")
pdf("MS2_fragments_per_sample.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Count)) +
geom_histogram() +
theme_Publication() +
labs(title = "Number of fragments\ndetected per sample", x = "# Peptides", y = "Frequency")
dev.off()
pdf("MS2_missing_values.pdf",
width = 5,
height = 5)
set.seed(123)
data <- assay(obj, "MS2")
data[data == 0] <- NA
pheatmap(data,
annotation_col = as.data.frame(colData(obj)[,c("replicate", "multiplier")]),
scale = "none",
na_col = "black",
show_rownames = FALSE,
show_colnames = FALSE,
cluster_rows = FALSE,
cluster_cols = FALSE)
dev.off()
# Chunk 9
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
df <- assay(obj, "RT") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
pdf("peptide_retention_times_unflitered_replicate.pdf",
width = 10,
height = 10)
ggplot(df, aes(x = id, y = value, color = as.factor(replicate))) +
geom_jitter(alpha = 0.75) +
theme_Publication() +
labs(title = "", x = "Peptide", y = "Retention time (min)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10),
legend.position = "bottom") +
scale_color_discrete(name = "Replicate")
dev.off()
pdf("peptide_retention_times_unflitered_type.pdf",
width = 10,
height = 10)
ggplot(df, aes(x = id, y = value, color = as.factor(multiplier))) +
geom_jitter(alpha = 0.75) +
theme_Publication() +
labs(title = "", x = "Peptide", y = "Retention time (min)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10),
legend.position = "bottom") +
scale_color_discrete(name = "Type")
dev.off()
# Chunk 10
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
# transform
assays(obj)[["MS1.log2"]] <- log2(assay(obj, "MS1") + 1)
# plot by cell
df <- assay(obj, "MS1.log2") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
pdf("MS1.log2_distribution_unflitered_cell.pdf",
width = 8,
height = 10)
ggplot(df, aes(x = as.factor(run_id), y = value, fill = as.factor(replicate))) +
geom_boxplot(width = 0.7) +
theme_Publication() +
labs(title = "Cell #", x = "Run", y = "Log2(MS1 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x", nrow = 3)
dev.off()
# plot by peptide
pdf("MS1.log2_distribution_unflitered_peptide.pdf",
width = 15,
height = 10)
ggplot(df, aes(x = id, y = value)) +
geom_boxplot() +
theme_Publication() +
labs(title = "Cell #", x = "Peptide", y = "Log2(MS1 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
cell_number = as.factor(obj$multiplier),
run_id = obj$run_id)
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$Precursor.Charge))
pdf("MS1.log2_unflitered_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(scale(assay(obj, "MS1.log2"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS1 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# PCA
df <- colData(obj)
df$multiplier <- factor(df$multiplier)
p <- pca(na.omit(assay(obj, "MS1.log2")),
metadata = df,
center = TRUE,
scale = TRUE)
screeplot(p)
pdf("MS1.log2_unflitered_eigencor.pdf",
width = 5,
height = 5)
eigencorplot(p,
main = "Principle component correlations",
cexMain = 1.5,
metavars = c("replicate", "date", "run_id", "multiplier"),
col = viridis(100),
colCorval = 'firebrick',
fontCorval = 2,
cexCorval = 0.5,
rotLabX = 45,
posColKey = 'top')
dev.off()
pdf("MS1.log2_unflitered_replicate_pca.pdf",
width = 5,
height = 5)
biplot(p,
colby = "replicate",
shape = "multiplier",
legendPosition = 'right',
hline = 0,
vline = 0,
gridlines.major = FALSE,
gridlines.minor = FALSE,
lab = NULL)
dev.off()
# Chunk 11
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
# transform
assays(obj)[["MS2.log2"]] <- log2(assay(obj, "MS2") + 1)
# plot by cell
df <- assay(obj, "MS2.log2") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
pdf("MS2.log2_distribution_unflitered_cell.pdf",
width = 8,
height = 10)
ggplot(df, aes(x = as.factor(run_id), y = value, fill = as.factor(replicate))) +
geom_boxplot(width = 0.7) +
theme_Publication() +
labs(title = "Cell #", x = "Run", y = "Log2(MS2 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x", nrow = 3)
dev.off()
# plot by peptide
pdf("MS2.log2_distribution_unflitered_peptide.pdf",
width = 15,
height = 10)
ggplot(df, aes(x = id, y = value)) +
geom_boxplot() +
theme_Publication() +
labs(title = "Cell #", x = "Peptide", y = "Log2(MS2 intensity)", fill = "Replicate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10)) +
facet_wrap(.~as.factor(multiplier), scales = "free_x")
dev.off()
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj$replicate),
cell_number = as.factor(obj$multiplier),
run_id = obj$run_id)
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj)$Precursor.Charge))
pdf("MS2.log2_unflitered_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(scale(assay(obj, "MS2.log2"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS2 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# PCA
df <- colData(obj)
df$multiplier <- factor(df$multiplier)
p <- pca(na.omit(assay(obj, "MS2.log2")),
metadata = df,
center = TRUE,
scale = TRUE)
screeplot(p)
pdf("MS2.log2_unflitered_eigencor.pdf",
width = 5,
height = 5)
eigencorplot(p,
main = "Principle component correlations",
cexMain = 1.5,
metavars = c("replicate", "date", "run_id", "multiplier"),
col = viridis(100),
colCorval = 'firebrick',
fontCorval = 2,
cexCorval = 0.5,
rotLabX = 45,
posColKey = 'top')
dev.off()
pdf("MS2.log2_unflitered_replicate_pca.pdf",
width = 5,
height = 5)
biplot(p,
colby = "replicate",
shape = "multiplier",
legendPosition = 'right',
hline = 0,
vline = 0,
gridlines.major = FALSE,
gridlines.minor = FALSE,
lab = NULL)
dev.off()
# Chunk 12
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
# by standards
df.1 <- assay(obj, "MS1.log2") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value")
df.2 <- assay(obj, "MS2.log2") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value")
df <- cbind(df.1, df.2$value)
colnames(df) <- c("id", "variable", "ms1", "ms2")
df <- merge(df, as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
df$id <- gsub(";", " ", df$id)
# by cell amount
pdf("MS1_vs_MS2_unflitered_type.pdf",
width = 8,
height = 8)
ggplot(subset(df, multiplier != "0"), aes(x = ms1, y = ms2, color = as.factor(replicate))) +
geom_point() +
stat_smooth(method = "lm") +
stat_cor() +
facet_wrap(.~as.factor(multiplier)) +
labs(title = "", x = "Log2(MS1)", y = "Log2(MS2)") +
theme_Publication() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_color_discrete(name = "Replicate")
dev.off()
# by peptide for single cells
pdf("MS1_vs_MS2_unflitered_peptide.pdf",
width = 25,
height = 25)
ggplot(subset(df, multiplier == "1"), aes(x = ms1, y = ms2, color = as.factor(replicate))) +
geom_point() +
stat_smooth(method = "lm") +
stat_cor() +
facet_wrap(.~as.factor(multiplier)) +
labs(title = "HIstone Peptides", x = "Log2(MS1)", y = "Log2(MS2)") +
theme_Publication(base_size = 12) +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
facet_wrap(.~id, scales = "free", labeller = labeller(id = label_wrap_gen(20))) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_color_discrete(name = "Replicate")
dev.off()
# Chunk 13
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/unfiltered")
# plot single cells vs blanks
df <- assay(obj, "MS1") %>%
rownames_to_column("id") %>%
pivot_longer(
cols = -id, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names") %>%
subset(multiplier %in% c(0, 1))
df$id <- gsub(";", " ", df$id)
# summarize
df %>%
group_by(multiplier) %>%
summarize(mean = mean(value, na.rm = TRUE))
# peptides separate
# replicates merged
pdf("MS1_0cell_vs_1cell_peptide_all.pdf",
width = 20,
height = 20)
ggplot(df, aes(x = as.factor(multiplier), y = value, fill = as.factor(multiplier))) +
geom_boxplot() +
geom_jitter(alpha = 0.5) +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
theme_Publication(base_size = 12) +
labs(title = "", x = "Cell #", y = "MS1 Intensity") +
facet_wrap(~id, scales = "free_y", labeller = labeller(id = label_wrap_gen(20))) +
theme(legend.position = "none")
dev.off()
# replicates separated
pdf("MS1_0cell_vs_1cell_peptide_replicate.pdf",
width = 20,
height = 20)
ggplot(df, aes(x = as.factor(multiplier), y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha = 0.75, aes(color = as.factor(replicate))) +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
theme_Publication(base_size = 12) +
labs(title = "", x = "Cell #", y = "MS1 Intensity", color = "Replicate") +
facet_wrap(~id, scales = "free_y", labeller = labeller(id = label_wrap_gen(20)))
is.na(assay(obj, "MS1.log2"))
sum(is.na(assay(obj, "MS1.log2")))
sum(!is.na(assay(obj, "MS1.log2")))
4/4348
