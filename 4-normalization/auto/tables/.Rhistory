fontCorval = 2,
cexCorval = 0.5,
rotLabX = 45,
posColKey = 'top')
dev.off()
pdf("MS2.ratio.log1p_replicate_pca.pdf",
width = 5,
height = 5)
biplot(p,
colby = "replicate",
shape = "multiplier",
legendPosition = 'top',
hline = 0,
vline = 0,
lab = NULL) +
labs(color = "Replicate",
shape = "Multiplier") +
theme_Publication() +
theme(legend.box="vertical",
legend.margin=margin())
dev.off()
# Chunk 38
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/normalization")
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
experiment = obj.filter.ratio.multi$experiment,
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
condition = obj.filter.ratio.multi$condition,
run_id = obj.filter.ratio.multi$run_id)
pdf("MS1.ratio.single_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["sptm.ratio"]], "MS1.ratio"),
top_annotation = column_ha,
#right_annotation = row_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
pdf("MS1.ratio.log1p.single_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["sptm.ratio"]], "MS1.ratio.log1p"),
top_annotation = column_ha,
#right_annotation = row_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 39
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/normalization")
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
experiment = obj.filter.ratio.multi$experiment,
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
condition = obj.filter.ratio.multi$condition,
run_id = obj.filter.ratio.multi$run_id)
pdf("MS1.ratio.global_heatmap.pdf",
width = 10,
height = 3)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["global.ratio"]], "MS1.ratio"),
top_annotation = column_ha,
#right_annotation = row_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
pdf("MS1.ratio.log1p.global_heatmap.pdf",
width = 10,
height = 3)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["global.ratio"]], "MS1.ratio.log1p"),
top_annotation = column_ha,
#right_annotation = row_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 40
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/normalization")
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
experiment = obj.filter.ratio.multi$experiment,
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
condition = obj.filter.ratio.multi$condition,
run_id = obj.filter.ratio.multi$run_id)
pdf("MS1.ratio.h4_heatmap.pdf",
width = 10,
height = 3)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["h4.ac.ratio"]], "MS1.ratio"),
top_annotation = column_ha,
#right_annotation = row_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
pdf("MS1.ratio.log1p.h4_heatmap.pdf",
width = 10,
height = 3)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["h4.ac.ratio"]], "MS1.ratio.log1p"),
top_annotation = column_ha,
#right_annotation = row_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 41
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto")
saveRDS(obj.filter.ratio.multi, "obj.filter.ratio.multi.RDS")
# Chunk 42
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/tables")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/tables")
write.csv(assay(obj.filter.ratio.multi[["ptm.ratio"]], "RT"), "RT.csv")
# untransformed
write.csv(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS1.ratio"), "MS1.ratio.csv")
write.csv(assay(obj.filter.ratio.multi[["sptm.ratio"]], "MS1.ratio"), "MS1.ratio.single.csv")
write.csv(assay(obj.filter.ratio.multi[["global.ratio"]], "MS1.ratio"), "MS1.ratio.global.csv")
write.csv(assay(obj.filter.ratio.multi[["h4.ac.ratio"]], "MS1.ratio"), "MS1.ratio.h4.csv")
# transformed
write.csv(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS1.ratio.log1p"), "MS1.ratio.log1p.csv")
write.csv(assay(obj.filter.ratio.multi[["sptm.ratio"]], "MS1.ratio.log1p"), "MS1.ratio.log1p.single.csv")
write.csv(assay(obj.filter.ratio.multi[["global.ratio"]], "MS1.ratio.log1p"), "MS1.ratio.log1p.global.csv")
write.csv(assay(obj.filter.ratio.multi[["h4.ac.ratio"]], "MS1.ratio.log1p"), "MS1.ratio.log1p.h4.csv")
# Chunk 43
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
# assess batch effects
# batchQC(assay(obj.filter, "MS1.log2.center"), obj.filter$replicate, NULL,
#         report_file="MS1.log2.center.no-correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# keeping the number of cells and condition be variables of interest
# pdata <- data.frame(colnames(obj.filter), obj.filter$replicate, obj.filter$multiplier)
# modmatrix = model.matrix(~as.integer(obj.filter$multiplier), data=pdata)
# assays(obj.filter, withDimnames=FALSE)[["MS1.log2.center.impute.batchCorrect"]] <- as.data.frame(ComBat(dat = assay(obj.filter, "MS1.log2.center"),
#                                                                batch = obj.filter$replicate,
#                                                                mod = modmatrix,
#                                                                ref.batch = 1))
# assess correction
# batchQC(assay(obj.filter, "MS1.log2.center.impute.batchCorrect"), obj.filter$replicate, as.integer(obj.filter$condition),
#         report_file="MS1.log2.center.correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
assays(obj.filter, withDimnames=FALSE)[["MS1.log2.center.impute.batchCorrect"]] <- removeBatchEffect(assay(obj.filter, "MS1.log2.center.impute"),
batch = obj.filter$replicate)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter$replicate),
cell_number = as.factor(obj.filter$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj.filter)$Precursor.Charge))
pdf("MS1.log2.center.impute.batchCorrect_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(scale(assay(obj.filter, "MS1.log2.center.impute.batchCorrect"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS2 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# PCA
p <- pca(na.omit(assay(obj.filter, "MS1.log2.center.impute.batchCorrect")),
metadata = colData(obj.filter),
center = TRUE,
scale = TRUE)
screeplot(p)
pdf("MS1.log2.center.impute.batchCorrect_eigencor.pdf",
width = 5,
height = 5)
eigencorplot(p,
main = "Principle component correlations",
cexMain = 1.5,
metavars = c("replicate", "date", "run_id", "multiplier"),
col = viridis(100),
colCorval = 'firebrick',
fontCorval = 2,
cexCorval = 0.5,
rotLabX = 45,
posColKey = 'top')
dev.off()
pdf("MS1.log2.center.impute.batchCorrect_replicate_pca.pdf",
width = 5,
height = 5)
biplot(p,
colby = "replicate",
shape = "multiplier",
legendPosition = 'top',
hline = 0,
vline = 0,
lab = NULL) +
labs(color = "Replicate",
shape = "# Cells") +
theme_Publication() +
theme(legend.box="vertical",
legend.margin=margin())
dev.off()
# Chunk 44
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
# assess batch effects
# batchQC(assay(obj.filter, "MS2.log2.center"), obj.filter$replicate, NULL,
#         report_file="MS2.log2.center.no-correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
# correct batch using combat
# keeping the number of cells and condition be variables of interest
# pdata <- data.frame(colnames(obj.filter), obj.filter$replicate, obj.filter$multiplier)
# modmatrix = model.matrix(~as.integer(obj.filter$multiplier), data=pdata)
# assays(obj.filter, withDimnames=FALSE)[["MS2.log2.center.impute.batchCorrect"]] <- as.data.frame(ComBat(dat = assay(obj.filter, "MS2.log2.center"),
#                                                                batch = obj.filter$replicate,
#                                                                mod = modmatrix,
#                                                                ref.batch = 1))
# assess correction
# batchQC(assay(obj.filter, "MS2.log2.center.impute.batchCorrect"), obj.filter$replicate, as.integer(obj.filter$condition),
#         report_file="MS2.log2.center.correction.html", report_dir=".",
#         report_option_binary="111111111",
#         view_report=FALSE, interactive=FALSE, batchqc_output=FALSE)
assays(obj.filter, withDimnames=FALSE)[["MS2.log2.center.impute.batchCorrect"]] <- removeBatchEffect(assay(obj.filter, "MS2.log2.center.impute"),
batch = obj.filter$replicate)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter$replicate),
cell_number = as.factor(obj.filter$multiplier))
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj.filter)$Precursor.Charge))
pdf("MS2.log2.center.impute.batchCorrect_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(scale(assay(obj.filter, "MS2.log2.center.impute.batchCorrect"), center = FALSE, scale = FALSE),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Log2(MS2 area)"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# PCA
p <- pca(na.omit(assay(obj.filter, "MS2.log2.center.impute.batchCorrect")),
metadata = colData(obj.filter),
center = TRUE,
scale = TRUE)
screeplot(p)
pdf("MS2.log2.center.impute.batchCorrect_eigencor.pdf",
width = 5,
height = 5)
eigencorplot(p,
main = "Principle component correlations",
cexMain = 1.5,
metavars = c("replicate", "date", "run_id", "multiplier"),
col = viridis(100),
colCorval = 'firebrick',
fontCorval = 2,
cexCorval = 0.5,
rotLabX = 45,
posColKey = 'top')
dev.off()
pdf("MS2.log2.center.impute.batchCorrect_replicate_pca.pdf",
width = 5,
height = 5)
biplot(p,
colby = "replicate",
shape = "multiplier",
legendPosition = 'top',
hline = 0,
vline = 0,
lab = NULL) +
labs(color = "Replicate",
shape = "# Cells") +
theme_Publication() +
theme(legend.box="vertical",
legend.margin=margin())
dev.off()
# Chunk 45
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto")
saveRDS(obj.filter, "obj.filter.RDS")
# Chunk 46
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/tables")
write.csv(assay(obj.filter, "MS1.log2.center.impute.batchCorrect"), "MS1.log2.center.impute.batchCorrect.csv")
write.csv(assay(obj.filter, "MS2.log2.center.impute.batchCorrect"), "MS2.log2.center.impute.batchCorrect.csv")
# Chunk 47
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
assays(obj.filter.ratio.multi[["ptm.ratio"]], withDimnames=FALSE)[["MS1.ratio.log1p.batchCorrect"]] <-
removeBatchEffect(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS1.ratio.log1p"),
batch = obj.filter.ratio.multi$replicate)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
run_id = obj.filter.ratio.multi$run_id)
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj.filter.ratio.multi[["ptm.ratio"]])$Precursor.Charge))
pdf("MS1.ratio.log1p.batchCorrect_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS1.ratio.log1p.batchCorrect"),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Normalized Peptide Ratio"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# PCA
p <- pca(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS1.ratio.log1p.batchCorrect"),
metadata = colData(obj.filter.ratio.multi),
center = TRUE,
scale = TRUE)
pdf("MS1.ratio.log1p.batchCorrect_screeplot.pdf",
width = 5,
height = 5)
screeplot(p,
components = getComponents(p)[1:10])
dev.off()
pdf("MS1.ratio.log1p.batchCorrect_eigencor.pdf",
width = 5,
height = 5)
eigencorplot(p,
main = "Principle component correlations",
cexMain = 1.5,
metavars = c("replicate", "date", "run_id", "multiplier", "total.ms1"),
col = viridis(100),
colCorval = 'firebrick',
fontCorval = 2,
cexCorval = 0.5,
rotLabX = 45,
posColKey = 'top')
dev.off()
pdf("MS1.ratio.log1p.batchCorrect_replicate_pca.pdf",
width = 4,
height = 5)
biplot(p,
colby = "replicate",
shape = "multiplier",
legendPosition = 'top',
hline = 0,
vline = 0,
lab = NULL) +
labs(color = "Replicate",
shape = "Multiplier") +
theme_Publication() +
theme(legend.box="vertical",
legend.margin=margin())
dev.off()
pdf("MS1.ratio.log1p.batchCorrect_replicate_pca_pairs.pdf",
width = 5,
height = 5)
pairsplot(p,
components = getComponents(p, seq_len(3)),
colby = "replicate",
shape = "multiplier",
hline = 0,
vline = 0,
lab = NULL)
dev.off()
# Chunk 48
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
assays(obj.filter.ratio.multi[["ptm.ratio"]], withDimnames=FALSE)[["MS2.ratio.log1p.batchCorrect"]] <-
removeBatchEffect(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS2.ratio.log1p"),
batch = obj.filter.ratio.multi$replicate)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
run_id = obj.filter.ratio.multi$run_id)
row_ha = rowAnnotation(charge = anno_barplot(rowData(obj.filter.ratio.multi[["ptm.ratio"]])$Precursor.Charge))
pdf("MS2.ratio.log1p.batchCorrect_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS2.ratio.log1p.batchCorrect"),
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Normalized Peptide Ratio"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# PCA
p <- pca(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS2.ratio.log1p.batchCorrect"),
metadata = colData(obj.filter.ratio.multi),
center = TRUE,
scale = TRUE)
pdf("MS2.ratio.log1p.batchCorrect_screeplot.pdf",
width = 5,
height = 5)
screeplot(p,
components = getComponents(p)[1:10])
dev.off()
pdf("MS2.ratio.log1p.batchCorrect_eigencor.pdf",
width = 5,
height = 5)
eigencorplot(p,
main = "Principle component correlations",
cexMain = 1.5,
metavars = c("replicate", "date", "run_id", "multiplier", "total.ms2"),
col = viridis(100),
colCorval = 'firebrick',
fontCorval = 2,
cexCorval = 0.5,
rotLabX = 45,
posColKey = 'top')
dev.off()
pdf("MS2.ratio.log1p.batchCorrect_replicate_pca.pdf",
width = 5,
height = 5)
biplot(p,
colby = "replicate",
shape = "multiplier",
legendPosition = 'top',
hline = 0,
vline = 0,
lab = NULL) +
labs(color = "Replicate",
shape = "Multiplier") +
theme_Publication() +
theme(legend.box="vertical",
legend.margin=margin())
dev.off()
# Chunk 49
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
assays(obj.filter.ratio.multi[["sptm.ratio"]], withDimnames=FALSE)[["MS1.ratio.log1p.batchCorrect"]] <-
removeBatchEffect(assay(obj.filter.ratio.multi[["sptm.ratio"]], "MS1.ratio.log1p"),
batch = obj.filter.ratio.multi$replicate)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
run_id = obj.filter.ratio.multi$run_id)
pdf("MS1.ratio.log1p.batchCorrect.single_heatmap.pdf",
width = 10,
height = 10)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["sptm.ratio"]], "MS1.ratio.log1p.batchCorrect"),
top_annotation = column_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 50
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
assays(obj.filter.ratio.multi[["global.ratio"]], withDimnames=FALSE)[["MS1.ratio.log1p.batchCorrect"]] <-
removeBatchEffect(assay(obj.filter.ratio.multi[["global.ratio"]], "MS1.ratio.log1p"),
batch = obj.filter.ratio.multi$replicate)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
run_id = obj.filter.ratio.multi$run_id)
pdf("MS1.ratio.log1p.batchCorrect.global_heatmap.pdf",
width = 10,
height = 3)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["global.ratio"]], "MS1.ratio.log1p.batchCorrect"),
top_annotation = column_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 51
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/batch-corrected")
assays(obj.filter.ratio.multi[["h4.ac.ratio"]], withDimnames=FALSE)[["MS1.ratio.log1p.batchCorrect"]] <-
removeBatchEffect(assay(obj.filter.ratio.multi[["h4.ac.ratio"]], "MS1.ratio.log1p"),
batch = obj.filter.ratio.multi$replicate)
# heatmap
column_ha = HeatmapAnnotation(replicate = as.factor(obj.filter.ratio.multi$replicate),
cell_number = as.factor(obj.filter.ratio.multi$multiplier),
run_id = obj.filter.ratio.multi$run_id)
pdf("MS1.ratio.log1p.batchCorrect.h4_heatmap.pdf",
width = 10,
height = 3)
set.seed(123)
Heatmap(assay(experiments(obj.filter.ratio.multi)[["h4.ac.ratio"]], "MS1.ratio.log1p.batchCorrect"),
top_annotation = column_ha,
heatmap_legend_param = list(title = "PTM relative abundance"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 52
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto")
saveRDS(obj.filter.ratio.multi, "obj.filter.ratio.multi.RDS")
# Chunk 53
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/tables")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/4-normalization/auto/tables")
write.csv(assay(obj.filter.ratio.multi[["ptm.ratio"]], "MS1.ratio.log1p.batchCorrect"), "MS1.ratio.log1p.batchCorrect.csv")
write.csv(assay(obj.filter.ratio.multi[["sptm.ratio"]], "MS1.ratio.log1p.batchCorrect"), "MS1.ratio.log1p.batchCorrect.csv")
write.csv(assay(obj.filter.ratio.multi[["global.ratio"]], "MS1.ratio.log1p.batchCorrect"), "MS1.ratio.log1p.batchCorrect.csv")
write.csv(assay(obj.filter.ratio.multi[["h4.ac.ratio"]], "MS1.ratio.log1p.batchCorrect"), "MS1.ratio.log1p.batchCorrect.csv")
