boxedLabels = FALSE,
drawConnectors = FALSE,
widthConnectors = 1.0,
colConnectors = 'black',
arrowheads = FALSE,
max.overlaps = 5,
gridlines.major	= FALSE,
gridlines.minor = FALSE,
ylim = c(0, 10))
dev.off()
pdf("nabut_vs_control_sc_volcano.pdf",
height = 6,
width = 6)
EnhancedVolcano(res.sc,
lab = rownames(res.sc),
title = "Nabut vs Control",
subtitle = NULL,
caption = NULL,
x = 'log2FC',
y = 'p.value',
pCutoffCol = "p.value",
pointSize = 4.0,
colAlpha = 0.75,
legendPosition = "none",
FCcutoff = 0.5,
pCutoff = 0.05,
labSize = 3,
labCol = 'black',
labFace = 'bold',
boxedLabels = FALSE,
drawConnectors = FALSE,
widthConnectors = 1.0,
colConnectors = 'black',
arrowheads = FALSE,
max.overlaps = Inf,
gridlines.major	= FALSE,
gridlines.minor = FALSE,
ylim = c(0, 10))
dev.off()
Heatmap(t(scale(t(obj.ratio.sc.sig), center = TRUE, scale = TRUE)),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
Heatmap(t(scale(t(obj.ratio.sc.sig), center = TRUE, scale = TRUE)),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/8-differential-abundance/auto+nabut")
obj.filter.ratio.multi.1cell[["ptm.ratio"]]$condition.predict <- obj.filter.ratio.multi.1cell$condition.predict
res.sc <- differential_abundance(obj.filter.ratio.multi.1cell[["ptm.ratio"]],
assay = "MS1.ratio.batchCorrect",
test_type = "t.test",
group_column = "condition.predict",
group1 = "control",
group2 = "treat")
write.csv(res.sc, "nabut_vs_control_sc.csv")
# volcano
# res$volcano.label <- ""
# res$volcano.score <- abs(res$log2fc) * -log10(res$p.value)
# res <- res[order(res$volcano.score, decreasing = TRUE),]
# res$volcano.label[1:20] <- res$ptm[1:20]
# res$direction <- ifelse(res$log2fc > 0, "up", "down")
pdf("nabut_vs_control_sc_volcano.pdf",
height = 6,
width = 6)
EnhancedVolcano(res.sc,
lab = rownames(res.sc),
title = "Nabut vs Control",
subtitle = NULL,
caption = NULL,
x = 'log2FC',
y = 'p.value',
pCutoffCol = "p.value",
pointSize = 4.0,
colAlpha = 0.75,
legendPosition = "none",
FCcutoff = 0.5,
pCutoff = 0.05,
labSize = 3,
labCol = 'black',
labFace = 'bold',
boxedLabels = FALSE,
drawConnectors = FALSE,
widthConnectors = 1.0,
colConnectors = 'black',
arrowheads = FALSE,
max.overlaps = Inf,
gridlines.major	= FALSE,
gridlines.minor = FALSE,
ylim = c(0, 10))
dev.off()
# heatmap all sc
obj.ratio.sc.sig <- assay(obj.filter.ratio.multi.1cell[["ptm.ratio"]], "MS1.ratio.batchCorrect")[rownames(res.sc[res.sc$p.adj < 0.05,]),]
column_ha = HeatmapAnnotation(Condition = obj.filter.ratio.multi.1cell$condition.predict,
Replicate = obj.filter.ratio.multi.1cell$replicate.unique,
col = list(Condition = c("control" = "#317ec2",
"treat" = "#c03830"),
Replicate = c("1" = brewer.pal(5, "Greens")[1],
"2" = brewer.pal(5, "Greens")[2],
"3" = brewer.pal(5, "Greens")[3],
"4" = brewer.pal(5, "Greens")[4],
"5" = brewer.pal(5, "Greens")[5]
)
)
)
histone_proteins <- sub("^([^-]+)-.*$", "\\1", rownames(obj.ratio.sc.sig))
pdf("nabut_vs_control_sc_all_heatmap.pdf",
width = 8,
height = 7)
Heatmap(t(scale(t(obj.ratio.sc.sig), center = TRUE, scale = TRUE)),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
dev.off()
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/8-differential-abundance/auto+nabut")
obj.filter.ratio.multi.1cell[["ptm.ratio"]]$condition.predict <- obj.filter.ratio.multi.1cell$condition.predict
res.sc <- differential_abundance(obj.filter.ratio.multi.1cell[["ptm.ratio"]],
assay = "MS1.ratio.batchCorrect",
test_type = "t.test",
group_column = "condition.predict",
group1 = "control",
group2 = "treat")
write.csv(res.sc, "nabut_vs_control_sc.csv")
# volcano
# res$volcano.label <- ""
# res$volcano.score <- abs(res$log2fc) * -log10(res$p.value)
# res <- res[order(res$volcano.score, decreasing = TRUE),]
# res$volcano.label[1:20] <- res$ptm[1:20]
# res$direction <- ifelse(res$log2fc > 0, "up", "down")
pdf("nabut_vs_control_sc_volcano.pdf",
height = 6,
width = 6)
EnhancedVolcano(res.sc,
lab = rownames(res.sc),
title = "Nabut vs Control",
subtitle = NULL,
caption = NULL,
x = 'log2FC',
y = 'p.value',
pCutoffCol = "p.value",
pointSize = 4.0,
colAlpha = 0.75,
legendPosition = "none",
FCcutoff = 0.5,
pCutoff = 0.05,
labSize = 3,
labCol = 'black',
labFace = 'bold',
boxedLabels = FALSE,
drawConnectors = FALSE,
widthConnectors = 1.0,
colConnectors = 'black',
arrowheads = FALSE,
max.overlaps = Inf,
gridlines.major	= FALSE,
gridlines.minor = FALSE,
ylim = c(0, 10))
dev.off()
# heatmap all sc
obj.ratio.sc.sig <- assay(obj.filter.ratio.multi.1cell[["ptm.ratio"]], "MS1.ratio.batchCorrect")[rownames(res.sc[res.sc$p.adj < 0.05,]),]
column_ha = HeatmapAnnotation(Replicate = obj.filter.ratio.multi.1cell$replicate.unique,
Condition = obj.filter.ratio.multi.1cell$condition.predict,
col = list(Condition = c("control" = "#317ec2",
"treat" = "#c03830"),
Replicate = c("1" = brewer.pal(5, "Greens")[1],
"2" = brewer.pal(5, "Greens")[2],
"3" = brewer.pal(5, "Greens")[3],
"4" = brewer.pal(5, "Greens")[4],
"5" = brewer.pal(5, "Greens")[5]
)
)
)
histone_proteins <- sub("^([^-]+)-.*$", "\\1", rownames(obj.ratio.sc.sig))
pdf("nabut_vs_control_sc_all_heatmap.pdf",
width = 8,
height = 7)
Heatmap(t(scale(t(obj.ratio.sc.sig), center = TRUE, scale = TRUE)),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
dev.off()
?Heatmap
scale(t(obj.ratio.sc.sig), center = TRUE, scale = TRUE)
pdf("nabut_vs_control_sc_all_heatmap.pdf",
width = 8,
height = 7)
Heatmap(scale(obj.ratio.sc.sig, center = TRUE, scale = TRUE),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
dev.off()
obj.ratio.sc.sig
pdf("nabut_vs_control_sc_all_heatmap.pdf",
width = 8,
height = 7)
Heatmap(t(scale(t(obj.ratio.sc.sig))),
top_annotation = col(umn_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
column_split = obj.filter.ratio.multi.1cell$condition.predict,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
dev.off()
pdf("nabut_vs_control_sc_all_heatmap.pdf",
width = 8,
height = 7)
Heatmap(t(scale(t(obj.ratio.sc.sig))),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
column_split = obj.filter.ratio.multi.1cell$condition.predict,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
dev.off()
pdf("nabut_vs_control_sc_all_heatmap.pdf",
width = 8,
height = 7)
Heatmap(t(scale(t(obj.ratio.sc.sig))),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
column_split = obj.filter.ratio.multi.1cell$condition.predict,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = TRUE,
row_names_gp = gpar(fontsize = 10))
dev.off()
pdf("nabut_vs_control_sc_all_heatmap.pdf",
width = 8,
height = 7)
Heatmap(t(scale(t(obj.ratio.sc.sig))),
top_annotation = column_ha,
heatmap_legend_param = list(title = "Z-score"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_column_names = FALSE,
column_split = obj.filter.ratio.multi.1cell$condition.predict,
split = histone_proteins,
cluster_column_slices = TRUE,
cluster_row_slices = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(SummarizedExperiment)
library(tidyr)
library(dplyr)
library(tibble)
library(ggplot2)
library(pheatmap)
library(ComplexHeatmap)
library(ggpubr)
library(reshape2)
library(PCAtools)
library(umap)
library(class)
library(cluster)
library(viridis)
library(boot)
library(EnhancedVolcano)
# Chunk 3
source("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/functions.R")
# Chunk 4
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-cell-classification/auto+nabut")
obj.filter.ratio.multi.1cell <- readRDS("obj.filter.ratio.multi.1cell.RDS")
# control
res <- cor(t(assay(obj.filter.ratio.multi.1cell[["ptm.ratio"]], "MS1.ratio.batchCorrect"))))
# control
res <- cor(t(assay(subset(obj.filter.ratio.multi.1cell[["ptm.ratio"]], condition == "control"), "MS1.ratio.batchCorrect")))
obj.filter.ratio.multi.1cell[["ptm.ratio"]]
obj.filter.ratio.multi[,obj.filter.ratio.multi$condition == "control"][["ptm.ratio"]]
# control
obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "control"][["ptm.ratio"]]
res
res <- cor(t(assay(obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "control"][["ptm.ratio"]], "MS1.ratio.batchCorrect")))
res
control.corr <- cor(t(assay(obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "control"][["ptm.ratio"]], "MS1.ratio.batchCorrect")))
corrplot(control.corr,
method = "square",
type = "lower",
order = "hclust",
tl.pos	= "ld",
tl.cex	= 0.5,
tl.col = "black")
?corrplot
install.packages("corrplot")
corrplot(control.corr,
method = "square",
type = "lower",
order = "hclust",
tl.pos	= "ld",
tl.cex	= 0.5,
tl.col = "black")
library(corrplot)
corrplot(control.corr,
method = "square",
type = "lower",
order = "hclust",
tl.pos	= "ld",
tl.cex	= 0.5,
tl.col = "black")
setewd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/9-biological-variability/auto+nabut")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/9-biological-variability/auto+nabut")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/9-biological-variability/auto+nabut")
# control
control.corr <- cor(t(assay(obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "control"][["ptm.ratio"]], "MS1.ratio.batchCorrect")))
pdf("ptm-ptm_cor_control.pdf",
height = 5,
width = 5)
corrplot(control.corr,
method = "square",
type = "lower",
order = "hclust",
tl.pos	= "ld",
tl.cex	= 0.5,
tl.col = "black")
dev.off()
nabut.corr <- cor(t(assay(obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "treat"][["ptm.ratio"]], "MS1.ratio.batchCorrect")))
pdf("ptm-ptm_cor_nabut.pdf",
height = 5,
width = 5)
corrplot(nabut.corr,
method = "square",
type = "lower",
order = "hclust",
tl.pos	= "ld",
tl.cex	= 0.5,
tl.col = "black")
dev.off()
pdf("ptm-ptm_cor_control.pdf",
height = 8,
width = 8)
corrplot(control.corr,
method = "square",
type = "lower",
order = "hclust",
tl.pos	= "ld",
tl.cex	= 0.5,
tl.col = "black")
dev.off()
pdf("ptm-ptm_cor_nabut.pdf",
height = 8,
width = 8)
corrplot(nabut.corr,
method = "square",
type = "lower",
order = "hclust",
tl.pos	= "ld",
tl.cex	= 0.5,
tl.col = "black")
dev.off()
# control
pairwise.euclidean <- dist(t(assay(obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "control"][["ptm.ratio"]], "MS1.ratio.batchCorrect")))
pairwise.euclidean
hist(pairwise.euclidean, main='Log transform', col='wheat', xlab = "Euclidean distance", breaks = nrow(df))
flatten(pairwise.euclidean)
as.vector(pairwise.euclidean)
control.dist <- as.vector(dist(t(assay(obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "control"][["ptm.ratio"]], "MS1.ratio.batchCorrect"))))
treat.dist <- as.vector(dist(t(assay(obj.filter.ratio.multi.1cell[,obj.filter.ratio.multi.1cell$condition == "treat"][["ptm.ratio"]], "MS1.ratio.batchCorrect"))))
df <- data.frame(Control = control.dist,
Treat = treat.dist)
df
df <- data.frame(Control = control.dist,
Treat = treat.dist)
df <- makePaddedDataFrame(list(Control = control.dist,
Treat = treat.dist))
na.pad <- function(x,len){
x[1:len]
}
makePaddedDataFrame <- function(l,...){
maxlen <- max(sapply(l,length))
data.frame(lapply(l,na.pad,len=maxlen),...)
}
df <- makePaddedDataFrame(list(Control = control.dist,
Treat = treat.dist))
df
melt(df)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830"))
pdf("cell-cell_variabiility.pdf",
height = 5,
width = 5)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830"))
dev.off()
library(ggpubr)
?stat_compare_means
pdf("cell-cell_variabiility.pdf",
height = 5,
width = 5)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830")) +
stat_compare_means()
dev.off()
df("cell-cell_variabiility.pdf",
height = 5,
width = 5)
pdf("cell-cell_variabiility.pdf",
height = 5,
width = 5)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830")) +
stat_compare_means(label.x.npc = "middle",
label.y.npc = "top") +
labs(y = "Pairwise Euclidean Distance", fill = "Condition")
dev.off()
pdf("cell-cell_variabiility.pdf",
height = 5,
width = 5)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830")) +
stat_compare_means(label.x.npc = "center",
label.y.npc = "top") +
labs(y = "Pairwise Euclidean Distance", fill = "Condition")
dev.off()
pdf("cell-cell_variabiility.pdf",
height = 5,
width = 5)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830")) +
stat_compare_means(label.x.npc = "left",
label.y.npc = "top") +
labs(y = "Pairwise Euclidean Distance", fill = "Condition")
dev.off()
pdf("cell-cell_variabiility.pdf",
height = 5,
width = 5)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830")) +
# stat_compare_means(label.x.npc = "left",
#                    label.y.npc = "top") +
labs(y = "Pairwise Euclidean Distance", fill = "Condition")
dev.off()
pdf("cell-cell_variabiility.pdf",
height = 5,
width = 5)
ggplot(melt(df), aes(x = variable, y = value, fill = variable)) +
geom_violin() +
geom_boxplot(width=0.1, fill="white") +
theme_Publication() +
scale_fill_manual(values = c(Control = "#317ec2",
Treat = "#c03830")) +
# stat_compare_means(label.x.npc = "left",
#                    label.y.npc = "top") +
labs(y = "Pairwise Euclidean Distance", fill = "Condition") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
dev.off()
