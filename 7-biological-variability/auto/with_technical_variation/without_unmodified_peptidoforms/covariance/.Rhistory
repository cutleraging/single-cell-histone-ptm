df.plot$ptm <- factor(df.plot$ptm,
levels = rev(df.plot$ptm))
pdf("MS1.ratio.log1p.batchCorrect_variance_all.pdf",
width = 6,
height = 5)
ggplot(df.plot, aes(x=ptm, y=variance, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Variance",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylim(c(0, 0.03))
dev.off()
pdf("MS1.ratio.log1p.batchCorrect_variance_top_20.pdf",
width = 6,
height = 5)
ggplot(df.plot[1:20,], aes(x=ptm, y=variance, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Variance",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylim(c(0, 0.03))
dev.off()
# var vs mean
pdf("MS1.ratio.log1p.batchCorrect_mean_vs_variance.pdf",
width = 7,
height = 5)
ggplot(df, aes(x = mean, y = variance)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm") +
stat_cor() +
theme_Publication() +
labs(y = "Variance",
x = "Mean Relative Abundance",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin())
dev.off()
# plot vmr
df.plot <- df[order(df$vmr, decreasing = TRUE),] # order
df.plot$ptm <- factor(df.plot$ptm,
levels = rev(df.plot$ptm))
pdf("MS1.ratio.log1p.batchCorrect_vmr_all.pdf",
width = 6,
height = 5)
ggplot(df.plot, aes(x=ptm, y=vmr, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Variance Mean Ratio",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylim(c(0,0.07))
dev.off()
pdf("MS1.ratio.log1p.batchCorrect_vmr_top_20.pdf",
width = 6,
height = 5)
ggplot(df.plot[1:20,], aes(x=ptm, y=vmr, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Variance Mean Ratio",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylim(c(0,0.07))
dev.off()
# vmr vs mean
pdf("MS1.ratio.log1p.batchCorrect_mean_vs_vmr.pdf",
width = 7,
height = 5)
ggplot(df, aes(x = mean, y = vmr)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm") +
stat_cor() +
theme_Publication() +
labs(y = "VMR",
x = "Mean Relative Abundance",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin())
dev.off()
# var vs log2 mean
model <- lm(variance ~ poly(mean.log1p, 2, raw=TRUE), data=df)
coefficients <- coef(model)
equation <- sprintf("y = %.2f + %.2f*x + %.2f*x^2",
coefficients[1], coefficients[2], coefficients[3])
pdf("MS1.ratio.log1p.batchCorrect_mean.log1p_vs_variance.pdf",
width = 7,
height = 5)
ggplot(df, aes(x = mean.log1p, y = variance)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "blue") +
stat_cor() +
theme_Publication() +
labs(y = "Variance",
x = "Log2(Mean Relative Abundance)",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin()) +
annotate("text", x = Inf, y = Inf, label = equation, hjust = 1.5, vjust = 5, size = 4, color = "black")
dev.off()
# vmr vs log2 mean
pdf("MS1.ratio.log1p.batchCorrect_mean.log1p_vs_vmr.pdf",
width = 7,
height = 5)
ggplot(df, aes(x = mean.log1p, y = vmr)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm") +
stat_cor() +
theme_Publication() +
labs(y = "VMR",
x = "Log2(Mean Relative Abundance)",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin())
dev.off()
# Chunk 18
dir.create("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/coefficient_of_variation")
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/coefficient_of_variation")
# get relative abundance
df <- assay(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]], "MS1.ratio.log1p.batchCorrect") %>%
as.data.frame() %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
group_by(ptm) %>%
summarize(mean = mean(value, na.rm = TRUE),
mean.log1p = log1p(mean),
cv = sd(value, na.rm = TRUE)/mean,
cv.squared = cv^2) %>%
merge(as.data.frame(rowData(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]])), by.x = "ptm", by.y = "row.names")
df$Protein.Name <- protein_readable_translation(df$Protein.Name)
# plot cv
df.plot <- df[order(df$cv, decreasing = TRUE),] # order
df.plot$ptm <- factor(df.plot$ptm,
levels = rev(df.plot$ptm))
pdf("MS1.ratio.log1p.batchCorrect_cv_all.pdf",
width = 7,
height = 7)
ggplot(df.plot, aes(x=ptm, y=cv, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Coefficient of Variation",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1),
breaks = c(seq(0, 1.5, by = 0.25)),
limits = c(0, 1.3))
dev.off()
pdf("MS1.ratio.log1p.batchCorrect_cv_top_20.pdf",
width = 6,
height = 5)
ggplot(df.plot[1:20,], aes(x=ptm, y=cv, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Coefficient of Variation",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1),
breaks = c(seq(0, 1.5, by = 0.25)),
limits = c(0, 1.3))
dev.off()
# heatmap
column_ha = HeatmapAnnotation(Replicate = obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]]$replicate,
"Total MS1" = obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]]$total.ms1,
col = list(Replicate = c("1" = brewer.pal(3, "Set1")[1],
"2" = brewer.pal(3, "Set1")[2],
"3" = brewer.pal(3, "Set1")[3])))
mat <- assay(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]], "MS1.ratio.log1p.batchCorrect")
mat <- mat[match(df.plot$ptm, rownames(mat)),]
# Scale each row to have mean 0 and standard deviation 1
mat.scaled <- t(scale(t(mat), scale = TRUE, center = FALSE))
row_ha = rowAnnotation(CV = anno_barplot(df.plot$cv))
pdf("MS1.ratio.log1p.batchCorrect_cv_heatmap.pdf",
width = 10,
height = 10)
Heatmap(mat.scaled,
top_annotation = column_ha,
right_annotation = row_ha,
heatmap_legend_param = list(title = "Scaled Relative Abundance"),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_column_names = FALSE,
row_names_gp = gpar(fontsize = 10))
dev.off()
# cv vs mean
pdf("MS1.ratio.log1p.batchCorrect_mean_vs_cv.pdf",
width = 6,
height = 5)
ggplot(df, aes(x = mean, y = cv)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm", color = "blue") +
stat_cor() +
theme_Publication() +
scale_color_manual(values = protein_colors) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(seq(0, 1.5, by = 0.25))) +
labs(y = "Coefficient of Variation",
x = "Mean Relative Abundance",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin())
# annotate("text", x = Inf, y = Inf, label = equation, hjust = 1.5, vjust = 5, size = 4, color = "black")
dev.off()
# cv vs log2 mean
model <- lm(cv.squared ~ poly(mean.log1p, 2, raw=TRUE), data=df)
coefficients <- coef(model)
equation <- sprintf("y = %.2f + %.2f*x + %.2f*x^2",
coefficients[1], coefficients[2], coefficients[3])
pdf("MS1.ratio.log1p.batchCorrect_mean.log1p_vs_cv.pdf",
width = 7,
height = 5)
ggplot(df, aes(x = mean.log1p, y = cv)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "blue") +
stat_cor() +
theme_Publication() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(seq(0, 1.5, by = 0.25))) +
labs(y = "Coefficient of Variation",
x = "Log2(Mean Relative Abundance)",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin())+
annotate("text", x = Inf, y = Inf, label = equation, hjust = 1.5, vjust = 5, size = 4, color = "black")
dev.off()
# plot cv2
df.plot <- df[order(df$cv.squared, decreasing = TRUE),] # order
df.plot$ptm <- factor(df.plot$ptm,
levels = rev(df.plot$ptm))
pdf("MS1.ratio.log1p.batchCorrect_cv2_all.pdf",
width = 6,
height = 5)
ggplot(df.plot, aes(x=ptm, y=cv.squared, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Coefficient of Variation Squared",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylim(c(0, 1.4))
dev.off()
pdf("MS1.ratio.log1p.batchCorrect_cv2_top_20.pdf",
width = 6,
height = 5)
ggplot(df.plot[1:20,], aes(x=ptm, y=cv.squared, fill=Protein.Name)) +
geom_bar(stat="identity", width=0.95, position = position_dodge(width=1)) +
geom_text(aes(label=ptm), vjust=0.5, hjust = -0.05, angle=0, position=position_dodge(width=1), size = 3) +
coord_flip() +
theme_Publication() +
scale_fill_manual(values = protein_colors) +
labs(y = "Coefficient of Variation Squared",
x = "Histone PTM",
fill = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())  +
ylim(c(0, 1.4))
dev.off()
# cv2 vs mean
model <- lm(cv.squared ~ poly(mean, 2, raw=TRUE), data=df)
coefficients <- coef(model)
equation <- sprintf("y = %.2f + %.2f*x + %.2f*x^2",
coefficients[1], coefficients[2], coefficients[3])
pdf("MS1.ratio.log1p.batchCorrect_mean_vs_cv2.pdf",
width = 7,
height = 5)
ggplot(df, aes(x = mean, y = cv.squared)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "blue") +
stat_cor() +
theme_Publication() +
labs(y = "Coefficient of Variation Squared",
x = "Mean Relative Abundance",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin()) +
annotate("text", x = Inf, y = Inf, label = equation, hjust = 1.5, vjust = 5, size = 4, color = "black")
dev.off()
# cv2 vs log2 mean
model <- lm(cv.squared ~ poly(mean.log1p, 2, raw=TRUE), data=df)
coefficients <- coef(model)
equation <- sprintf("y = %.2f + %.2f*x + %.2f*x^2",
coefficients[1], coefficients[2], coefficients[3])
pdf("MS1.ratio.log1p.batchCorrect_mean.log1p_vs_cv2.pdf",
width = 7,
height = 5)
ggplot(df, aes(x = mean.log1p, y = cv.squared)) +
geom_point(aes(color = Protein.Name)) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "blue") +
stat_cor() +
theme_Publication() +
labs(y = "Coefficient of Variation Squared",
x = "Log2(Mean Relative Abundance)",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin()) +
annotate("text", x = Inf, y = Inf, label = equation, hjust = 1.5, vjust = 5, size = 4, color = "black")
dev.off()
# Chunk 19
dir.create("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/beta_regression")
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/beta_regression")
# get relative abundance
df <- assay(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]], "MS1.ratio.log1p") %>%
as.data.frame() %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj.filter.ratio.multi.sc.no_unmod)), by.x = "variable", by.y = "row.names")
# check if values are between 0-1
range(df$value)
# Fit beta regression
# including batch as a fixed effect - systematic effects
model <- betareg(value ~ 1 + ptm + replicate, data = df)
summary(model)
# Plotting fitted values vs. residuals
# should be randomly distributed
df$residuals <- residuals(model, type = "pearson")
pdf("MS1.ratio.log1p.batchCorrect_beta_regression_residuals.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = fitted(model), y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals vs. Fitted", x = "Fitted Values", y = "Residuals")
dev.off()
# Checking normality of residuals
pdf("MS1.ratio.log1p.batchCorrect_beta_distribution_residuals.pdf",
width = 5,
height = 5)
hist(residuals(model, type = "pearson"), breaks = 20, main = "Histogram of Residuals")
dev.off()
# Generating a Q-Q plot for residuals
pdf("MS1.ratio.log1p.batchCorrect_beta_regression_qq.pdf",
width = 5,
height = 5)
qqnorm(df$residuals)
qqline(df$residuals, col = "steelblue")
dev.off()
# Chunk 20
dir.create("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/linear_regression")
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/linear_regression")
# get relative abundance
df <- assay(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]], "MS1.ratio.log1p") %>%
as.data.frame() %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj.filter.ratio.multi.sc.no_unmod)), by.x = "variable", by.y = "row.names")
# check if values are between 0-1
range(df$value)
# Fit beta regression
# including batch as a fixed effect - systematic effects
model <- glm(log2(value) ~ ptm + replicate, data = df)
summary(model)
# Plotting fitted values vs. residuals
# should be randomly distributed
df$residuals <- residuals(model, type = "pearson")
pdf("MS1.ratio.log1p.batchCorrect_linear_regression_residuals.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = fitted(model), y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals vs. Fitted", x = "Fitted Values", y = "Residuals")
dev.off()
# Checking normality of residuals
pdf("MS1.ratio.log1p.batchCorrect_linear_distribution_residuals.pdf",
width = 5,
height = 5)
hist(residuals(model, type = "pearson"), breaks = 20, main = "Histogram of Residuals")
dev.off()
# Generating a Q-Q plot for residuals
pdf("MS1.ratio.log1p.batchCorrect_linear_regression_qq.pdf",
width = 5,
height = 5)
qqnorm(df$residuals)
qqline(df$residuals, col = "steelblue")
dev.off()
ptm_variability <- df %>%
group_by(ptm) %>%
summarise(
Mean_Residual = mean(residuals),
SD_Residual = sd(residuals),
Count = n()
) %>%
arrange(desc(SD_Residual))
# plot
# coefficients <- coef(model)
# equation <- sprintf("y = %.2f + %.2f*x + %.2f*x^2",
#                     coefficients[1], coefficients[2], coefficients[3])
pdf("MS1.ratio.log1p.batchCorrect_linear_regression_mean_vs_residual.pdf",
width = 7,
height = 5)
ggplot(ptm_variability, aes(x = Mean_Residual, y = SD_Residual)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_Publication() +
labs(y = "Residual",
x = "Mean",
color = "Protein") +
theme(legend.position = "right",
legend.direction = "vertical",
legend.margin=margin())
dev.off()
# Chunk 21
dir.create("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/covariance")
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/7-biological-variability/auto/with_technical_variation/without_unmodified_peptidoforms/covariance")
# Compute the correlation matrix
cor.mat <- cor(t(assay(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]], "MS1.ratio.log1p.batchCorrect")),
method = "pearson")
# Perform hierarchical clustering
dist.mat <- dist(cor.mat)
hc <- hclust(dist.mat)
# Calculate the p-values of the correlations
p.mat <- cor.mtest(t(assay(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]], "MS1.ratio.log1p.batchCorrect")), conf.level = 0.95)$p
# set protein colors
rowdata <- rowData(obj.filter.ratio.multi.sc.no_unmod[["ptm.ratio"]])
rowdata$Protein.Name <- protein_readable_translation(rowdata$Protein.Name)
rowdata <- rowdata[match(rownames(cor.mat), rownames(rowdata)),]
# Reorder Protein.Names according to hierarchical clustering order
rowdata <- rowdata[hc$order, ]
# Create a color vector matched to the reordered labels
#protein_color_map <- setNames(protein_colors, rowdata$Protein.Name)  # Ensure protein_color_map exists
# Output matrices
write.csv(cor.mat, "cor.mat.csv")
write.csv(p.mat, "p.mat.csv")
# Plot correlation matrix
pdf("covariance_matrix.pdf", height = 10, width = 10)
corrplot(cor.mat,
method = "color",
type = "full",
order = "hclust",  # Ensure clustering order matches the row order used
tl.pos = "lt",
#tl.col = protein_colors[rowdata$Protein.Name],  # Apply color to labels based on row names
tl.col = "black",
col = COL2(diverging = c("RdBu"), n = 200),
tl.cex = 1,
tl.offset = 0.3,
p.mat = p.mat,  # Add p-value matrix
sig.level = 0.05,  # Add significance level
insig = "blank")  # Non-significant correlations are blank
dev.off()
