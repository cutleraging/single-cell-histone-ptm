scale_fill_Publication() +
theme_Publication(base_size = 16) +
facet_wrap(.~CAROL_group, scale = "free", ncol = 4, labeller = label_wrap_gen(width = 40)) +
theme(strip.text = element_text(size = 12),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank())
dev.off()
stats_summary <- consequences_df_long %>%
group_by(condition, CAROL_group) %>%
summarise(mean_log2fc = mean(Percentage, na.rm = TRUE),
sd_log2fc = sd(Percentage, na.rm = TRUE))
pdf("snv_carol_precent_condition_all.pdf",
width = 5,
height = 4)
ggplot(consequences_df_long, aes(x = condition, y = Percentage, fill = condition)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, y = mean_log2fc, ymin = mean_log2fc - sd_log2fc, ymax = mean_log2fc + sd_log2fc),
width = 0.5, position = position_dodge(0.9)) +
geom_point(data = consequences_df_long, aes(x = condition, y = Percentage), position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
stat_compare_means(method = "t.test", label = "p.signif",  vjust = 1, hjust = -1) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Group", y = "% SNVs Per Cell") +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
scale_fill_Publication() +
theme_Publication(base_size = 16) +
facet_wrap(.~CAROL_group, scale = "free", ncol = 4, labeller = label_wrap_gen(width = 40)) +
theme(strip.text = element_text(size = 12),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank())
dev.off()
table(vep_list[[21]]$CADD_PHRED)
table(vep_list[[21]]$HIGH_INF_POS) # indicating if the variant falls in a high information position of a transcription factor binding profile
table(vep_list[[21]]$HIGH_INF_POS) # indicating if the variant falls in a high information position of a transcription factor binding profile
table(vep_list[[21]]$MOTIF_SCORE_CHANGE) # difference in motif score of the reference and variant sequences for the TFBP
table(vep_list[[21]]$MOTIF_NAME) # source and identifier of a transcription factor binding profile aligned at this position
vep_list[[21]]$mutfunc_motif
vep_list[[21]]$MOTIF_POS
vep_files <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/vep/archive",
pattern = "\\.txt$", full.names = TRUE)
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table_filtered.txt", header = TRUE, sep = "\t")
# reorder vep_files to match sample_table
vep_files <- vep_files[match(sample_table$sample,tools::file_path_sans_ext(basename(vep_files)))]
# read in files to list
vep_list <- lapply(vep_files, function(x) read.table(x, comment.char = "#", fill = TRUE, sep = "\t"))
# add column names
colnames <- c("Uploaded_variation", "Location", "Allele", "Gene", "Feature", "Feature_type", "Consequence", "cDNA_position", "CDS_position", "Protein_position", "Amino_acids", "Codons", "Existing_variation", "IMPACT", "DISTANCE", "STRAND", "FLAGS", "VARIANT_CLASS", "SYMBOL", "SYMBOL_SOURCE", "HGNC_ID", "BIOTYPE", "CANONICAL", "MANE_SELECT", "MANE_PLUS_CLINICAL", "TSL", "APPRIS", "CCDS", "ENSP", "SWISSPROT", "TREMBL", "UNIPARC", "UNIPROT_ISOFORM", "SOURCE", "GENE_PHENO", "SIFT", "PolyPhen", "EXON", "INTRON", "DOMAINS", "miRNA", "HGVSc", "HGVSp", "HGVS_OFFSET", "AF", "AFR_AF", "AMR_AF", "EAS_AF", "EUR_AF", "SAS_AF", "gnomADe_AF", "gnomADe_AFR_AF", "gnomADe_AMR_AF", "gnomADe_ASJ_AF", "gnomADe_EAS_AF", "gnomADe_FIN_AF", "gnomADe_NFE_AF", "gnomADe_OTH_AF", "gnomADe_SAS_AF", "gnomADg_AF", "gnomADg_AFR_AF", "gnomADg_AMI_AF", "gnomADg_AMR_AF", "gnomADg_ASJ_AF", "gnomADg_EAS_AF", "gnomADg_FIN_AF", "gnomADg_MID_AF", "gnomADg_NFE_AF", "gnomADg_OTH_AF", "gnomADg_SAS_AF", "MAX_AF", "MAX_AF_POPS", "CLIN_SIG", "SOMATIC", "PHENO", "PUBMED", "MOTIF_NAME", "MOTIF_POS", "HIGH_INF_POS", "MOTIF_SCORE_CHANGE", "TRANSCRIPTION_FACTORS", "am_class", "am_pathogenicity", "GERP", "phastCons", "phyloP")
vep_list <- lapply(vep_list, function(df) {
colnames(df) <- colnames
return(df)
})
# filter for SNV
vep_list <- lapply(vep_list, function(df) {
df <- subset(df, VARIANT_CLASS == "SNV")
return(df)
})
table(vep_list[[21]]$MOTIF_NAME) # source and identifier of a transcription factor binding profile aligned at this position
vep_list <- lapply(vep_list, function(df) {
df <- distinct(df, Uploaded_variation, .keep_all = TRUE)
return(df)
})
table(vep_list[[21]]$MOTIF_NAME) # source and identifier of a transcription factor binding profile aligned at this position
vep_files <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/vep",
pattern = "\\.txt$", full.names = TRUE)
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table_filtered.txt", header = TRUE, sep = "\t")
# reorder vep_files to match sample_table
vep_files <- vep_files[match(sample_table$sample,tools::file_path_sans_ext(basename(vep_files)))]
# read in files to list
vep_list <- lapply(vep_files, function(x) read.table(x, comment.char = "#", fill = TRUE, sep = "\t"))
# add column names
colnames <- c("Uploaded_variation", "Location", "Allele", "Gene", "Feature", "Feature_type", "Consequence", "cDNA_position", "CDS_position", "Protein_position", "Amino_acids", "Codons", "Existing_variation", "IMPACT", "DISTANCE", "STRAND", "FLAGS", "VARIANT_CLASS", "SYMBOL", "SYMBOL_SOURCE", "HGNC_ID", "BIOTYPE", "CANONICAL", "MANE_SELECT", "MANE_PLUS_CLINICAL", "TSL", "APPRIS", "CCDS", "ENSP", "SWISSPROT", "TREMBL", "UNIPARC", "UNIPROT_ISOFORM", "SOURCE", "GENE_PHENO", "SIFT", "PolyPhen", "EXON", "INTRON", "DOMAINS", "miRNA", "HGVSc", "HGVSp", "HGVS_OFFSET", "AF", "AFR_AF", "AMR_AF", "EAS_AF", "EUR_AF", "SAS_AF", "gnomADe_AF", "gnomADe_AFR_AF", "gnomADe_AMR_AF", "gnomADe_ASJ_AF", "gnomADe_EAS_AF", "gnomADe_FIN_AF", "gnomADe_NFE_AF", "gnomADe_OTH_AF", "gnomADe_SAS_AF", "gnomADg_AF", "gnomADg_AFR_AF", "gnomADg_AMI_AF", "gnomADg_AMR_AF", "gnomADg_ASJ_AF", "gnomADg_EAS_AF", "gnomADg_FIN_AF", "gnomADg_MID_AF", "gnomADg_NFE_AF", "gnomADg_OTH_AF", "gnomADg_SAS_AF", "MAX_AF", "MAX_AF_POPS", "CLIN_SIG", "SOMATIC", "PHENO", "PUBMED", "MOTIF_NAME", "MOTIF_POS", "HIGH_INF_POS", "MOTIF_SCORE_CHANGE", "TRANSCRIPTION_FACTORS", "am_class", "am_pathogenicity", "GERP", "phastCons", "phyloP")
vep_list <- lapply(vep_list, function(df) {
colnames(df) <- colnames
return(df)
})
# filter for SNV
vep_list <- lapply(vep_list, function(df) {
df <- subset(df, VARIANT_CLASS == "SNV")
return(df)
})
table(vep_list[[21]]$MOTIF_NAME) # source and identifier of a transcription factor binding profile aligned at this position
table(vep_list[[21]]$HIGH_INF_POS) # indicating if the variant falls in a high information position of a transcription factor binding profile
table(vep_list[[21]]$MOTIF_SCORE_CHANGE) # difference in motif score of the reference and variant sequences for the TFBP
# count the different types of consequences in each sample
vep_list_agg <- lapply(vep_list, function(df) {
df %>%
group_by(HIGH_INF_POS) %>%
summarise(Count = n())
})
vep_list[[1]]$HIGH_INF_POS
# count the different types of consequences in each sample
vep_list_agg <- lapply(vep_list, function(df) {
df %>%
group_by(HIGH_INF_POS) %>%
summarise(Count = n())
})
vep_files <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/vep",
pattern = "\\.txt$", full.names = TRUE)
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table_filtered.txt", header = TRUE, sep = "\t")
# reorder vep_files to match sample_table
vep_files <- vep_files[match(sample_table$sample,tools::file_path_sans_ext(basename(vep_files)))]
# read in files to list
vep_list <- lapply(vep_files, function(x) read.table(x, comment.char = "#", fill = TRUE, sep = "\t"))
# add column names
colnames <- c("Uploaded_variation", "Location", "Allele", "Gene", "Feature", "Feature_type", "Consequence", "cDNA_position", "CDS_position", "Protein_position", "Amino_acids", "Codons", "Existing_variation", "IMPACT", "DISTANCE", "STRAND", "FLAGS", "VARIANT_CLASS", "SYMBOL", "SYMBOL_SOURCE", "HGNC_ID", "BIOTYPE", "CANONICAL", "MANE_SELECT", "MANE_PLUS_CLINICAL", "TSL", "APPRIS", "CCDS", "ENSP", "SWISSPROT", "TREMBL", "UNIPARC", "UNIPROT_ISOFORM", "SOURCE", "GENE_PHENO", "SIFT", "PolyPhen", "EXON", "INTRON", "DOMAINS", "miRNA", "HGVSc", "HGVSp", "HGVS_OFFSET", "AF", "AFR_AF", "AMR_AF", "EAS_AF", "EUR_AF", "SAS_AF", "gnomADe_AF", "gnomADe_AFR_AF", "gnomADe_AMR_AF", "gnomADe_ASJ_AF", "gnomADe_EAS_AF", "gnomADe_FIN_AF", "gnomADe_NFE_AF", "gnomADe_OTH_AF", "gnomADe_SAS_AF", "gnomADg_AF", "gnomADg_AFR_AF", "gnomADg_AMI_AF", "gnomADg_AMR_AF", "gnomADg_ASJ_AF", "gnomADg_EAS_AF", "gnomADg_FIN_AF", "gnomADg_MID_AF", "gnomADg_NFE_AF", "gnomADg_OTH_AF", "gnomADg_SAS_AF", "MAX_AF", "MAX_AF_POPS", "CLIN_SIG", "SOMATIC", "PHENO", "PUBMED", "MOTIF_NAME", "MOTIF_POS", "HIGH_INF_POS", "MOTIF_SCORE_CHANGE", "TRANSCRIPTION_FACTORS", "am_class", "am_pathogenicity", "GERP", "phastCons", "phyloP")
vep_list <- lapply(vep_list, function(df) {
colnames(df) <- colnames
return(df)
})
# filter for SNV
vep_list <- lapply(vep_list, function(df) {
df <- subset(df, VARIANT_CLASS == "SNV")
return(df)
})
vep_files <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/vep",
pattern = "\\.txt$", full.names = TRUE)
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table_filtered.txt", header = TRUE, sep = "\t")
# reorder vep_files to match sample_table
vep_files <- vep_files[match(sample_table$sample,tools::file_path_sans_ext(basename(vep_files)))]
# read in files to list
vep_list <- lapply(vep_files, function(x) read.table(x, comment.char = "#", fill = TRUE, sep = "\t"))
# add column names
colnames <- c("Uploaded_variation", "Location", "Allele", "Gene", "Feature", "Feature_type", "Consequence", "cDNA_position", "CDS_position", "Protein_position", "Amino_acids", "Codons", "Existing_variation", "IMPACT", "DISTANCE", "STRAND", "FLAGS", "VARIANT_CLASS", "SYMBOL", "SYMBOL_SOURCE", "HGNC_ID", "BIOTYPE", "CANONICAL", "MANE_SELECT", "MANE_PLUS_CLINICAL", "TSL", "APPRIS", "CCDS", "ENSP", "SWISSPROT", "TREMBL", "UNIPARC", "UNIPROT_ISOFORM", "SOURCE", "GENE_PHENO", "SIFT", "PolyPhen", "EXON", "INTRON", "DOMAINS", "miRNA", "HGVSc", "HGVSp", "HGVS_OFFSET", "AF", "AFR_AF", "AMR_AF", "EAS_AF", "EUR_AF", "SAS_AF", "gnomADe_AF", "gnomADe_AFR_AF", "gnomADe_AMR_AF", "gnomADe_ASJ_AF", "gnomADe_EAS_AF", "gnomADe_FIN_AF", "gnomADe_NFE_AF", "gnomADe_OTH_AF", "gnomADe_SAS_AF", "gnomADg_AF", "gnomADg_AFR_AF", "gnomADg_AMI_AF", "gnomADg_AMR_AF", "gnomADg_ASJ_AF", "gnomADg_EAS_AF", "gnomADg_FIN_AF", "gnomADg_MID_AF", "gnomADg_NFE_AF", "gnomADg_OTH_AF", "gnomADg_SAS_AF", "MAX_AF", "MAX_AF_POPS", "CLIN_SIG", "SOMATIC", "PHENO", "PUBMED", "MOTIF_NAME", "MOTIF_POS", "HIGH_INF_POS", "MOTIF_SCORE_CHANGE", "TRANSCRIPTION_FACTORS", "am_class", "am_pathogenicity", "GERP", "phastCons", "phyloP")
vep_list <- lapply(vep_list, function(df) {
colnames(df) <- colnames
return(df)
})
# filter for SNV
vep_list <- lapply(vep_list, function(df) {
df <- subset(df, VARIANT_CLASS == "SNV")
return(df)
})
source("~/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/1-data/sigprofilersimulator/231122_sigprofilesimulator_control.R", echo=TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)
library(stringr)
library(MutationalPatterns)
library(rstatix)
# Chunk 3
theme_Publication <- function(base_size=16, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family = "")
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
#legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
wrap_labels <- function(labels, width = 5) {
wrapped_labels <- str_wrap(labels, width)
names(wrapped_labels) <- names(labels)
return(wrapped_labels)
}
hg19_size <- 3036303846
vep_cols <- c("Uploaded_variation", "Location", "Allele", "Gene", "Feature", "Feature_type", "Consequence", "cDNA_position", "CDS_position", "Protein_position", "Amino_acids", "Codons", "Existing_variation", "IMPACT", "DISTANCE", "STRAND", "FLAGS", "VARIANT_CLASS", "SYMBOL", "SYMBOL_SOURCE", "HGNC_ID", "BIOTYPE", "CANONICAL", "MANE_SELECT", "MANE_PLUS_CLINICAL", "TSL", "APPRIS", "CCDS", "ENSP", "SWISSPROT", "TREMBL", "UNIPARC", "UNIPROT_ISOFORM", "SOURCE", "GENE_PHENO", "SIFT", "PolyPhen", "EXON", "INTRON", "DOMAINS", "miRNA", "HGVSc", "HGVSp", "HGVS_OFFSET", "AF", "AFR_AF", "AMR_AF", "EAS_AF", "EUR_AF", "SAS_AF", "gnomADe_AF", "gnomADe_AFR_AF", "gnomADe_AMR_AF", "gnomADe_ASJ_AF", "gnomADe_EAS_AF", "gnomADe_FIN_AF", "gnomADe_NFE_AF", "gnomADe_OTH_AF", "gnomADe_SAS_AF", "gnomADg_AF", "gnomADg_AFR_AF", "gnomADg_AMI_AF", "gnomADg_AMR_AF", "gnomADg_ASJ_AF", "gnomADg_EAS_AF", "gnomADg_FIN_AF", "gnomADg_MID_AF", "gnomADg_NFE_AF", "gnomADg_OTH_AF", "gnomADg_SAS_AF", "MAX_AF", "MAX_AF_POPS", "CLIN_SIG", "SOMATIC", "PHENO", "PUBMED", "MOTIF_NAME", "MOTIF_POS", "HIGH_INF_POS", "MOTIF_SCORE_CHANGE", "TRANSCRIPTION_FACTORS", "CADD_PHRED", "CADD_RAW", "am_class", "am_pathogenicity", "BLOSUM62", "CAROL", "mutfunc_motif", "5UTR_annotation", "5UTR_consequence", "Existing_InFrame_oORFs", "Existing_OutOfFrame_oORFs", "Existing_uORFs", "NMD", "GERP", "phastCons", "phyloP")
# Chunk 4
vep_files <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/vep/",
pattern = "\\.txt$", full.names = TRUE)
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table_filtered.txt", header = TRUE, sep = "\t")
# reorder vep_files to match sample_table
vep_files <- vep_files[match(sample_table$sample,tools::file_path_sans_ext(basename(vep_files)))]
# read in files to list
vep_list <- lapply(vep_files, function(x) read.table(x, comment.char = "#", fill = TRUE, sep = "\t"))
# names
names(vep_list) <- sample_table$sample
# add column names
vep_list <- lapply(vep_list, function(df) {
colnames(df) <- vep_cols
return(df)
})
# filter for SNV
vep_list <- lapply(vep_list, function(df) {
df <- subset(df, VARIANT_CLASS == "SNV")
return(df)
})
# Chunk 5
vep_list_condition <- list(control = do.call(rbind, vep_list[sample_table$condition == "control"]),
enu = do.call(rbind, vep_list[sample_table$condition == "enu"]))
vep_shuffle <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/vep/simulated_cell_burden-matched/",
pattern = "\\.txt$", full.names = TRUE)
# create a table for the shuffled samples
shuffle_table <- sample_table[0, ]
for (i in 1:nrow(sample_table)) {
replicatedRow <- sample_table[rep(i, 100), ]
shuffle_table <- rbind(shuffle_table, replicatedRow)
}
vep_shuffle
vep_shuffle <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/vep/simulated_cell_burden-matched",
pattern = "\\.txt$", full.names = TRUE)
# create a table for the shuffled samples
shuffle_table <- sample_table[0, ]
for (i in 1:nrow(sample_table)) {
replicatedRow <- sample_table[rep(i, 100), ]
shuffle_table <- rbind(shuffle_table, replicatedRow)
}
vep_shuffle
shuffle_table
shuffle_table$sample <- as.vector(unlist(sapply(sample_table$sample, function(x) {paste0(x, "_", 1:100)})))
shuffle_table
# reorder vep_files to match shuffle_table
vep_shuffle <- vep_shuffle[match(shuffle_table$sample,tools::file_path_sans_ext(basename(vep_shuffle)))]
# load
vep_shuffle_list <- lapply(vep_shuffle, function(x) read.table(x, comment.char = "#", fill = TRUE, sep = "\t"))
library(DESeq2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ggplot2)
library(ggpubr)
library(ComplexHeatmap)
library(corrplot)
library(maditr)
library(reshape2)
library(dplyr)
library(PCAtools)
library(stringr)
library(NbClust)
library(factoextra)
colour = palette.colors(palette = "Okabe-Ito")
# Chunk 3
all_un <- function(str) {
matches <- gregexpr("\\[.*?\\]", str)
brackets <- regmatches(str, matches)[[1]]
all(grepl("\\[un\\]", brackets))
}
unmod <- function(peptide) {
# Split the peptide by the semicolon
marks <- strsplit(peptide, ";")[[1]]
# Check if all the modifications are [un]
all_un <- all(grepl("\\[un\\]", marks))
return(all_un)
}
single_mark <- function(peptide) {
# Split the peptide by the semicolon
marks <- strsplit(peptide, ";")[[1]]
# Count the number of modifications (excluding [un])
modification_count <- sum(!grepl("\\[[un]\\]", marks))
# Check if it's exactly one
return(modification_count == 1)
}
combination_marks <- function(peptide) {
# Split the peptide by the semicolon
marks <- strsplit(peptide, ";")[[1]]
# Extract all the marks within brackets that are not [un]
unique_marks <- unique(gregexpr("\\[[^un]\\w+\\]", peptide, perl = TRUE)[[1]])
# Check if there are at least 2 unique marks other than [un]
return(length(unique_marks) >= 2)
}
hybrid_marks <- function(peptide) {
ac <- grepl("\\[ac\\]", peptide)
me <- grepl("\\[me1\\]", peptide) |
grepl("\\[me2\\]", peptide) |
grepl("\\[me3\\]", peptide)
return(ac && me)
}
BiocManager::install("SummarizedExperiment")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SummarizedExperiment")
BiocManager::install("SummarizedExperiment")
library(SummarizedExperiment)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(SummarizedExperiment)
library(PCAtools)
library(ComplexHeatmap)
library(sva)
library(tidyr)
library(dplyr)
library(tibble)
library(ggplot2)
library(pheatmap)
library(ggpubr)
library(reshape2)
library(viridis)
# Chunk 3
theme_Publication <- function(base_size=16, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family = "")
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
#legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
# Chunk 4
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/3-calibration-curves/auto/histone-standards")
obj <- readRDS("obj.hist-stand.RDS")
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/6-technical-variability/auto/within_replicate")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/6-technical-variability/auto/within_replicate")
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/within_replicate")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/within_replicate")
df <- assay(obj, "MS1") %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
# get CV for each ptm, replicate, standard amount
df.cv <- df %>%
group_by(ptm, replicate, multiplier) %>%
summarize(CV = sd(value, na.rm = TRUE)/mean(value, na.rm = TRUE))
write.csv(df.cv, "MS1_CV.csv", row.names = FALSE)
# plot by replicate, standard amount
pdf("MS1_CV_replicate.pdf",
width = 7,
height = 5)
ggplot(subset(df.cv, multiplier %in% c(1,2,4,8)), aes(x = as.factor(multiplier), y = CV, fill = as.factor(replicate))) +
geom_boxplot(width = 0.5, position = position_dodge(width = 0.6)) +
theme_Publication() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(seq(0, 1.5, by = 0.25))) +
labs(title = "", x = "Histone Standard (pg*10)", y = "MS1 instensity CV", fill = "Replicate")
dev.off()
# plot byreplicate, standard amount, ptm
pdf("MS1_CV_ptm.pdf",
width = 25,
height = 25)
ggplot(subset(df.cv, multiplier %in% c(1,2,4,8)), aes(x = as.factor(multiplier), y = CV, fill = as.factor(replicate))) +
geom_bar(stat = "identity", position=position_dodge()) +
theme_Publication(base_size = 12) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(title = "", x = "Histone Standard (pg*10)", y = "MS1 instensity CV", fill = "Replicate") +
facet_wrap(.~ptm, scales = "free", labeller = labeller(ptm = label_wrap_gen(20)))
dev.off()
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/6-technical-variability/auto/across_replicate")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/6-technical-variability/auto/across_replicate")
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
# merge with meta data
df <- assay(obj, "MS1") %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
# summarize for each ptm in each replicate
df.cv <- df %>%
group_by(ptm, replicate, multiplier) %>%
summarize(mean = mean(value, na.rm = TRUE) / sum(value, na.rm = TRUE)) %>%
group_by(ptm, multiplier) %>%
summarize(CV = sd(mean, na.rm = TRUE)/mean(mean, na.rm = TRUE))
write.csv(df.cv, "MS1_CV.csv", row.names = FALSE)
# plot by standard amount
pdf("MS1_CV_replicate.pdf",
width = 4,
height = 4)
ggplot(subset(df.cv, multiplier %in% c(1,2,4,8)), aes(x = as.factor(multiplier), y = CV)) +
geom_boxplot() +
theme_Publication() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(seq(0, 1.5, by = 0.25))) +
labs(title = "", x = "Histone Standard (pg*10)", y = "MS1 instensity CV")
dev.off()
# plot by standard amount, ptm
pdf("MS1_CV_ptm.pdf",
width = 25,
height = 25)
ggplot(subset(df.cv, multiplier %in% c(1,2,4,8)), aes(x = as.factor(multiplier), y = CV)) +
geom_bar(stat = "identity", position=position_dodge()) +
theme_Publication(base_size = 12) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(title = "", x = "Histone Standard (pg*10)", y = "MS1 intensity CV") +
facet_wrap(.~ptm, scales = "free", labeller = labeller(ptm = label_wrap_gen(20)))
dev.off()
# merge with meta data
df <- assay(obj, "MS1") %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
df.cv <- df %>%
group_by(ptm, replicate, multiplier) %>%
summarize(mean = mean(value, na.rm = TRUE) / sum(value, na.rm = TRUE))
df.cv
df.cv <- df %>%
group_by(ptm, replicate, multiplier) %>%
summarize(mean = mean(value / sum(value, na.rm = TRUE), na.rm = TRUE))
df.cv
df.cv <- df %>%
group_by(ptm, replicate, multiplier) %>%
summarize(mean = mean(value, na.rm = TRUE))
df.cv
df.cv <- df %>%
group_by(replicate, multiplier) %>%
summarize(sum = sum(value, na.rm = TRUE)) %>%
group_by(ptm, replicate, multiplier) %>%
summarize(mean = mean(value, na.rm = TRUE) / sum)
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
# merge with meta data
df <- assay(obj, "MS1") %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
# summarize for each ptm in each replicate
df.cv <- df %>%
group_by(ptm, replicate, multiplier) %>%
summarize(mean = mean(value, na.rm = TRUE) / sum) %>%
group_by(ptm, multiplier) %>%
summarize(CV = sd(mean, na.rm = TRUE)/mean(mean, na.rm = TRUE))
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/5-technical-variability/auto/across_replicate")
# merge with meta data
df <- assay(obj, "MS1") %>%
rownames_to_column("ptm") %>%
pivot_longer(
cols = -ptm, # This keeps the 'id' column fixed
names_to = "variable",
values_to = "value") %>%
merge(as.data.frame(colData(obj)), by.x = "variable", by.y = "row.names")
# summarize for each ptm in each replicate
df.cv <- df %>%
group_by(ptm, replicate, multiplier) %>%
summarize(mean = mean(value, na.rm = TRUE)) %>%
group_by(ptm, multiplier) %>%
summarize(CV = sd(mean, na.rm = TRUE)/mean(mean, na.rm = TRUE))
write.csv(df.cv, "MS1_CV.csv", row.names = FALSE)
# plot by standard amount
pdf("MS1_CV_replicate.pdf",
width = 4,
height = 4)
ggplot(subset(df.cv, multiplier %in% c(1,2,4,8)), aes(x = as.factor(multiplier), y = CV)) +
geom_boxplot() +
theme_Publication() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(seq(0, 1.5, by = 0.25))) +
labs(title = "", x = "Histone Standard (pg*10)", y = "MS1 instensity CV")
dev.off()
# plot by standard amount, ptm
pdf("MS1_CV_ptm.pdf",
width = 25,
height = 25)
ggplot(subset(df.cv, multiplier %in% c(1,2,4,8)), aes(x = as.factor(multiplier), y = CV)) +
geom_bar(stat = "identity", position=position_dodge()) +
theme_Publication(base_size = 12) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(title = "", x = "Histone Standard (pg*10)", y = "MS1 intensity CV") +
facet_wrap(.~ptm, scales = "free", labeller = labeller(ptm = label_wrap_gen(20)))
dev.off()
