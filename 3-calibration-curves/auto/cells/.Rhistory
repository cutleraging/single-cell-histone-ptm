}))
# summarize
summary_df <- summary_res_combined %>%
group_by(type, abnormality, sample) %>%
summarize(total_count = sum(count))
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
ggplot(summary_df, aes(x = sample, y = total_count, fill = abnormality)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Count", title = "Summary of SKY results") +
facet_wrap(~type) +
theme_Publication(base_size = 14) +
scale_fill_Publication()
dev.off()
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0.2))
names(summary_res) <- names(abnormality_results)
summary_res
abnormality_results
summary_res
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
summary_res_combined
# summarize
summary_df <- summary_res_combined %>%
group_by(type, abnormality, sample) %>%
summarize(total_count = sum(count))
summary_df
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0.2))
names(summary_res) <- names(abnormality_results)
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
ggplot(summary_df, aes(x = sample, y = total_count, fill = abnormality)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Count", title = "Summary of SKY results") +
facet_wrap(~type) +
theme_Publication(base_size = 14) +
scale_fill_Publication()
dev.off()
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0.2))
names(summary_res) <- names(abnormality_results)
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
ggplot(summary_res_combined, aes(x = sample, y = total_count, fill = abnormality)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Count", title = "Summary of SKY results") +
facet_wrap(~type) +
theme_Publication(base_size = 14) +
scale_fill_Publication()
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0.2))
names(summary_res) <- names(abnormality_results)
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
ggplot(summary_res_combined, aes(x = sample, y = total_count, fill = abnormality)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Count", title = "Summary of SKY results") +
facet_wrap(~type) +
theme_Publication(base_size = 14) +
scale_fill_Publication()
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0.2))
names(summary_res) <- names(abnormality_results)
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
ggplot(summary_res_combined, aes(x = sample, y = total_count, fill = abnormality)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Count", title = "Summary of SKY results") +
facet_wrap(~type) +
theme_Publication(base_size = 14) +
scale_fill_Publication()
summary_res_combined
summary_res
summary_res
abnormality_results
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0))
names(summary_res) <- names(abnormality_results)
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0.5))
names(summary_res) <- names(abnormality_results)
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
# summarize
summary_df <- summary_res_combined %>%
group_by(type, abnormality, sample) %>%
summarize(total_count = sum(count))
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
ggplot(summary_df, aes(x = sample, y = total_count, fill = abnormality)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Count", title = "Summary of SKY results") +
facet_wrap(~type) +
theme_Publication(base_size = 14) +
scale_fill_Publication()
dev.off()
summary_res_combined
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 1))
names(summary_res) <- names(abnormality_results)
# combine all samples
summary_res_combined <- do.call(rbind, lapply(names(summary_res), function(df_name) {
df <- summary_res[[df_name]]
df <- tibble::rownames_to_column(df, var = "Chr")
df <- mutate(df, sample = df_name)
df <- df[!is.na(df$type) & !is.na(df$abnormality), ]
df$type <- factor(df$type)
df$abnormality <- factor(df$abnormality)
df$count <- as.numeric(df$count)
return(df)
}))
# summarize
summary_df <- summary_res_combined %>%
group_by(type, abnormality, sample) %>%
summarize(total_count = sum(count))
# plot
pdf("summary_bar.pdf",
width = 6,
height = 6)
ggplot(summary_df, aes(x = sample, y = total_count, fill = abnormality)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Count", title = "Summary of SKY results") +
facet_wrap(~type) +
theme_Publication(base_size = 14) +
scale_fill_Publication()
dev.off()
summary_res_combined
# count clonal and somatic events per chromosome
chromosome <- abnormality_results[[1]]
proportion <- 0.2
# Convert cell content to character
chromsome <- as.character(chromsome)
# count clonal and somatic events per chromosome
chromosome <- abnormality_results[[1]]
proportion <- 0.2
chromosome
proportion
# count clonal and somatic events per chromosome
chromosome <- abnormality_results[[1]][6,]
chromosome
# Convert cell content to character
chromsome <- as.character(chromsome)
# count clonal and somatic events per chromosome
chromosome <- abnormality_results[[1]][6,]
proportion <- 0.2
# Convert cell content to character
chromosome <- as.character(chromosome)
# there are no events
if (all(is.na(chromosome))) {
clonal <- NA
type <- NA
count <- 0
# event is clonal if occurs above set proportion
} else if ((length(chromosome[duplicated(chromosome) & !is.na(chromosome)])/length(chromosome)) >= proportion) {
# event is clonal
clonal <- "clonal"
# what type of clonal abnormality
type <- unique(chromosome[duplicated(chromosome) & !is.na(chromosome)])
# how many clonal events
count <- length(chromosome[duplicated(chromosome) & !is.na(chromosome)])
# event is soamtic if occurs below set proportion
} else if ((length(chromosome[duplicated(chromosome) & !is.na(chromosome)])/length(chromosome)) < proportion) {
# event is somatic
clonal <- "somatic"
# what type of somatic event(s)
type <- unique(chromosome[!is.na(chromosome)])
# how many somatic event(s)
count <- sum(!is.na(chromosome))
}
clonal
type
count
((length(chromosome[duplicated(chromosome) & !is.na(chromosome)])/length(chromosome))
)
length(chromosome)
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0))
summary_res
# get the summary for each sample
summary_res <- lapply(abnormality_results, function(x) process_count_events_chromosome(x, proportion = 0))
names(summary_res) <- names(abnormality_results)
summary_res
# count clonal and somatic events per chromosome
chromosome <- abnormality_results[[1]][6,]
proportion <- 0.2
# Convert cell content to character
chromosome <- as.character(chromosome)
# there are no events
if (all(is.na(chromosome))) {
clonal <- NA
type <- NA
count <- 0
# event is clonal if occurs above set proportion
} else if ((length(chromosome[duplicated(chromosome) & !is.na(chromosome)])/length(chromosome)) >= proportion) {
# event is clonal
clonal <- "clonal"
# what type of clonal abnormality
type <- unique(chromosome[duplicated(chromosome) & !is.na(chromosome)])
# how many clonal events
count <- length(chromosome[duplicated(chromosome) & !is.na(chromosome)])
# event is soamtic if occurs below set proportion
} else if ((length(chromosome[duplicated(chromosome) & !is.na(chromosome)])/length(chromosome)) < proportion) {
# event is somatic
clonal <- "somatic"
# what type of somatic event(s)
type <- unique(chromosome[!is.na(chromosome)])
# how many somatic event(s)
count <- sum(!is.na(chromosome))
}
clonal
type
count
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tibble)
library(ComplexHeatmap)
library(ggplot2)
classify_abnormality_cell <- function(cell, chromosomes) {
# Convert cell content to character
cell_content <- as.character(cell)
# get first and second elements
split_results <- strsplit(cell_content, ",")
# get observed chromosome count
chr_count <- as.numeric(sapply(split_results, function(x) trimws(x[1])))
# get expected chromosome count
expected_count <- ifelse(grepl("Chr. X|Chr. Y", chromosomes), 1, 2)
# assign gain or loss
chr_count_res <- character(length(chr_count))
for(i in 1:length(chr_count)){
if (chr_count[i] > expected_count[i]) {
chr_count_res[i] <- "gain"
} else if (chr_count[i] < expected_count[i]) {
chr_count_res[i] <- "loss"
} else if (chr_count[i] == expected_count[i]){
chr_count_res[i] <- "normal"
}
}
# get observed abnormalities, expected is NA
abnormality <- sapply(split_results, function(x) ifelse(length(x) > 1, trimws(x[2]), NA))
# assign translocation or deletion
abnormality_res <- character(length(abnormality))
for(i in 1:length(abnormality)){
if (grepl("t", abnormality[i])) {
abnormality_res[i] <- "translocation"
} else if (grepl("del", abnormality[i])) {
abnormality_res[i] <- "deletion"
} else {
abnormality_res[i] <- "normal"
}
}
# combine the chromosome counts and abnormality
combined_vector <- ifelse(chr_count_res == "normal" & abnormality_res == "normal", NA,
ifelse(chr_count_res == "normal" & abnormality_res != "normal", abnormality_res,
ifelse(chr_count_res != "normal" & abnormality_res == "normal", chr_count_res,
ifelse(chr_count_res != "normal" & abnormality_res != "normal", paste(chr_count_res, abnormality_res, sep = ", "), NA))))
return(combined_vector)
}
process_abnormality_sample <- function(df) {
# Apply the function across columns
result_matrix <- apply(df, 2, function(x) classify_abnormality_cell(x, rownames(df)))
# Convert the matrix to a data frame
result_df <- as.data.frame(result_matrix)
# Set the row names of the result to match the original data frame
rownames(result_df) <- rownames(df)
return(result_df)
}
# count clonal and somatic events per chromosome
# chromosome <- abnormality_results[[1]][6,]
# proportion <- 0.2
count_events_chromosome <- function(chromosome, proportion) {
# Convert cell content to character
chromosome <- as.character(chromosome)
# there are no events
if (all(is.na(chromosome))) {
clonal <- NA
type <- NA
count <- 0
# event is clonal if occurs above set proportion
} else if ((length(chromosome[duplicated(chromosome) & !is.na(chromosome)])/length(chromosome)) >= proportion) {
# event is clonal
clonal <- "clonal"
# what type of clonal abnormality
type <- unique(chromosome[duplicated(chromosome) & !is.na(chromosome)])
# how many clonal events
count <- length(chromosome[duplicated(chromosome) & !is.na(chromosome)])
# event is soamtic if occurs below set proportion
} else if ((length(chromosome[duplicated(chromosome) & !is.na(chromosome)])/length(chromosome)) < proportion) {
# event is somatic
clonal <- "somatic"
# what type of somatic event(s)
type <- unique(chromosome[!is.na(chromosome)])
# how many somatic event(s)
count <- sum(!is.na(chromosome))
}
return(c(as.factor(clonal),
as.factor(type),
as.numeric(count)))
}
process_count_events_chromosome <- function(df, proportion) {
# Apply the function to each row and transpose the result
result_df <- t(apply(df, 1, function(x) count_events_chromosome(x, proportion)))
# Convert to dataframe
result_df <- as.data.frame(result_df)
# Set column names
colnames(result_df) <- c("type", "abnormality", "count")
return(result_df)
}
theme_Publication <- function(base_size=16, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family = "")
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "top",
legend.direction = "horizontal",
#legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Collaborations/Ellie\ Pan/240124-SKY/1-data")
file_names <- list.files(".", pattern = "\\.csv$", full.names = TRUE)
data <- lapply(file_names, function(x) read.csv(x, row.names = 1))
names(data) <- gsub("^\\./|\\.csv$", "", file_names)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Collaborations/Ellie\ Pan/240124-SKY/2-analysis")
abnormality_results <- lapply(data, process_abnormality_sample)
names(abnormality_results) <- names(data)
# rename columns by sample
# abnormality_results <- lapply(seq_along(abnormality_results), function(i) {
#   df <- abnormality_results[[i]]
#   names(df) <- paste(names(abnormality_results)[i], names(df), sep = "_")
#   return(df)
# })
# merge
abnormality_results_merged <- do.call(cbind, abnormality_results)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Collaborations/Ellie\ Pan/240124-SKY/2-analysis")
abnormality_results <- lapply(data, process_abnormality_sample)
names(abnormality_results) <- names(data)
# rename columns by sample
# abnormality_results <- lapply(seq_along(abnormality_results), function(i) {
#   df <- abnormality_results[[i]]
#   names(df) <- paste(names(abnormality_results)[i], names(df), sep = "_")
#   return(df)
# })
# merge
abnormality_results_merged <- do.call(cbind, abnormality_results)
abnormality_results_merged
colors <- c("gain" = "red",
"loss" = "blue",
"deletion" = "orange",
"gain, deletion" = "yellow2",
"translocation" = "green")
# set up
condition <- factor(sub("\\..*$", "", colnames(abnormality_results_merged)))
column_ha = HeatmapAnnotation(condition = condition,
col = list(condition = c("CM1P8" = "darkblue",
"WS3" = "darkred")))
colors <- c("gain" = "red",
"loss" = "blue",
"deletion" = "orange",
"gain, deletion" = "yellow2",
"translocation" = "green")
# plot
pdf("heatmap.pdf",
width = 5,
height = 4)
Heatmap(abnormality_results_merged,
name = "Abnormality",
top_annotation = column_ha,
col = colors,
na_col = "grey",
cluster_rows = FALSE,
cluster_columns = FALSE,
show_row_names = TRUE,
row_names_side = "left",
column_split = condition,
show_column_names = FALSE,
border = TRUE,
rect_gp = gpar(col = "white", lwd = 1))
dev.off()
pdf("heatmap.pdf",
width = 5,
height = 4)
Heatmap(abnormality_results_merged,
name = "Abnormality",
top_annotation = column_ha,
col = colors,
na_col = "grey",
cluster_rows = FALSE,
cluster_columns = FALSE,
show_row_names = TRUE,
row_names_side = "left",
column_split = condition,
show_column_names = FALSE,
border = TRUE,
rect_gp = gpar(col = "white", lwd = 1))
dev.off()
